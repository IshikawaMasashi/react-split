{"version":3,"sources":["webpack://ReactSplit/webpack/universalModuleDefinition","webpack://ReactSplit/webpack/bootstrap","webpack://ReactSplit/./node_modules/@ishikawa_masashi/cassowary/lib/expression.js","webpack://ReactSplit/./src/components/Split.tsx","webpack://ReactSplit/external \"react\"","webpack://ReactSplit/./node_modules/@ishikawa_masashi/cassowary/lib/strength.js","webpack://ReactSplit/./node_modules/@ishikawa_masashi/cassowary/lib/constraint.js","webpack://ReactSplit/./node_modules/@ishikawa_masashi/cassowary/lib/maptype.js","webpack://ReactSplit/./node_modules/@ishikawa_masashi/cassowary/lib/variable.js","webpack://ReactSplit/./src/index.ts","webpack://ReactSplit/./src/utils/assert.ts","webpack://ReactSplit/./src/utils/layout.ts","webpack://ReactSplit/./src/utils/toCSSPx.ts","webpack://ReactSplit/./node_modules/@ishikawa_masashi/cassowary/lib/index.js","webpack://ReactSplit/./node_modules/@ishikawa_masashi/cassowary/lib/solver.js","webpack://ReactSplit/./src/components/SplitPane.tsx","webpack://ReactSplit/./src/components/Resizer.tsx"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__2__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","maptype_1","variable_1","Expression","parsed","parseArgs","arguments","this","_terms","terms","_constant","constant","result","size","pair","itemAt","first","second","plus","minus","multiply","coefficient","divide","isConstant","toString","array","map","join","args","createMap","length","item","Variable","setDefault","j","k","terms2","termPair","Array","Error","value2","SplitOrientation","useState","useEffect","useRef","Split","props","setState","containerRef","indexRef","solverRef","varsRef","splitsRef","forceUpdate","document","addEventListener","onResizerMouseMove","onResizerMouseUp","newSplits","canonicalizeSplits","setupSolver","getContainerSize","orientation","querySolver","current","onChange","removeEventListener","splits","documentElement","style","pointerEvents","slice","e","vars","isVertical","Vertical","rect","getBoundingClientRect","mouseOffset","clientX","left","clientY","top","index","solver","suggestValue","updateVariables","preventDefault","container","Horizontal","clientHeight","clientWidth","count","React","Children","children","containerSize","info","assign","defaultSplit","push","min","max","Solver","addEditVariable","Strength","strong","cn","Constraint","Operator","Eq","addConstraint","right","Ge","Le","weak","suggestVarValues","x","y","isHorizontal","forEach","child","flexBasis","Math","round","flex","SplitPane","Resizer","onMouseDown","ev","varilable","removeEditVariable","medium","onResizerMouseDown","className","ref","flexDirection","a","b","w","clip","required","expression_1","strength_1","expression","operator","rhs","strength","_id","CnId","_operator","_strength","undefined","_expression","id","op","IndexedMap","empty","contains","find","Pair","insert","erase","last","pop","copy","_value","_context","VarId","_name","setName","context","setContext","setValue","toJSON","message","layoutThrottleDuration","layoutTimeout","clearTimeout","setTimeout","dispatchEvent","Event","__export","SymbolType","constraint_1","_cnMap","_rowMap","_varMap","_editMap","_infeasibleRows","_objective","Row","_artificial","_idTick","createConstraint","lhs","constraint","data","_createRow","row","tag","subject","_chooseSubject","type","Invalid","allDummies","nearZero","marker","_addWithArtificialVariable","solveFor","_substitute","_optimize","removeConstraint","cnPair","_removeConstraintEffects","rowPair","leaving","_getMarkerLeavingSymbol","solveForEx","hasConstraint","variable","expr","editPair","hasEditVariable","rows","delta","add","_dualOptimize","other","rowPair_1","coeff","coefficientFor","External","_getVarSymbol","_this","_makeSymbol","symbol","basicPair","insertRow","insertSymbol","objective","INVALID_SYMBOL","slack","Slack","error","errplus","errminus","dummy","Dummy","reverseSign","cells","art","success","basicRow","entering","_anyPivotableSymbol","removeSymbol","substitute","_getEnteringSymbol","_getLeavingSymbol","infeasible","_getDualEnteringSymbol","ratio","Number","MAX_VALUE","found","temp","temp_ratio","dmax","r1","r2","invalid","third","_removeMarkerEffects","_type","_cellMap","theCopy","resizerClassName"],"mappings":"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","file":"ReactSplit.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReactSplit\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"ReactSplit\"] = factory(root[\"react\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__2__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014, Nucleic Development Team.\r\n|\r\n| Distributed under the terms of the Modified BSD License.\r\n|\r\n| The full license is in the file COPYING.txt, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar maptype_1 = require(\"./maptype\");\r\nvar variable_1 = require(\"./variable\");\r\n/**\r\n * An expression of variable terms and a constant.\r\n *\r\n * The constructor accepts an arbitrary number of parameters,\r\n * each of which must be one of the following types:\r\n *  - number\r\n *  - Variable\r\n *  - Expression\r\n *  - 2-tuple of [number, Variable|Expression]\r\n *\r\n * The parameters are summed. The tuples are multiplied.\r\n *\r\n * @class\r\n * @param {...(number|Variable|Expression|Array)} args\r\n */\r\nvar Expression = /** @class */ (function () {\r\n    function Expression() {\r\n        var parsed = parseArgs(arguments);\r\n        this._terms = parsed.terms;\r\n        this._constant = parsed.constant;\r\n    }\r\n    /**\r\n     * Returns the mapping of terms in the expression.\r\n     *\r\n     * This *must* be treated as const.\r\n     * @private\r\n     */\r\n    Expression.prototype.terms = function () {\r\n        return this._terms;\r\n    };\r\n    /**\r\n     * Returns the constant of the expression.\r\n     * @private\r\n     */\r\n    Expression.prototype.constant = function () {\r\n        return this._constant;\r\n    };\r\n    /**\r\n     * Returns the computed value of the expression.\r\n     *\r\n     * @private\r\n     * @return {Number} computed value of the expression\r\n     */\r\n    Expression.prototype.value = function () {\r\n        var result = this._constant;\r\n        for (var i = 0, n = this._terms.size(); i < n; i++) {\r\n            var pair = this._terms.itemAt(i);\r\n            result += pair.first.value() * pair.second;\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Creates a new Expression by adding a number, variable or expression\r\n     * to the expression.\r\n     *\r\n     * @param {Number|Variable|Expression} value Value to add.\r\n     * @return {Expression} expression\r\n     */\r\n    Expression.prototype.plus = function (value) {\r\n        return new Expression(this, value);\r\n    };\r\n    /**\r\n     * Creates a new Expression by substracting a number, variable or expression\r\n     * from the expression.\r\n     *\r\n     * @param {Number|Variable|Expression} value Value to substract.\r\n     * @return {Expression} expression\r\n     */\r\n    Expression.prototype.minus = function (value) {\r\n        return new Expression(this, typeof value === 'number' ? -value : [-1, value]);\r\n    };\r\n    /**\r\n     * Creates a new Expression by multiplying with a fixed number.\r\n     *\r\n     * @param {Number} coefficient Coefficient to multiply with.\r\n     * @return {Expression} expression\r\n     */\r\n    Expression.prototype.multiply = function (coefficient) {\r\n        return new Expression([coefficient, this]);\r\n    };\r\n    /**\r\n     * Creates a new Expression by dividing with a fixed number.\r\n     *\r\n     * @param {Number} coefficient Coefficient to divide by.\r\n     * @return {Expression} expression\r\n     */\r\n    Expression.prototype.divide = function (coefficient) {\r\n        return new Expression([1 / coefficient, this]);\r\n    };\r\n    Expression.prototype.isConstant = function () {\r\n        return this._terms.size() == 0;\r\n    };\r\n    Expression.prototype.toString = function () {\r\n        var result = this._terms.array\r\n            .map(function (pair) {\r\n            return pair.second + '*' + pair.first.toString();\r\n        })\r\n            .join(' + ');\r\n        if (!this.isConstant() && this._constant !== 0) {\r\n            result += ' + ';\r\n        }\r\n        result += this._constant;\r\n        return result;\r\n    };\r\n    return Expression;\r\n}());\r\nexports.Expression = Expression;\r\n/**\r\n * An internal argument parsing function.\r\n * @private\r\n */\r\nfunction parseArgs(args) {\r\n    var constant = 0.0;\r\n    var factory = function () { return 0.0; };\r\n    var terms = maptype_1.createMap();\r\n    for (var i = 0, n = args.length; i < n; ++i) {\r\n        var item = args[i];\r\n        if (typeof item === 'number') {\r\n            constant += item;\r\n        }\r\n        else if (item instanceof variable_1.Variable) {\r\n            terms.setDefault(item, factory).second += 1.0;\r\n        }\r\n        else if (item instanceof Expression) {\r\n            constant += item.constant();\r\n            var terms2 = item.terms();\r\n            for (var j = 0, k = terms2.size(); j < k; j++) {\r\n                var termPair = terms2.itemAt(j);\r\n                terms.setDefault(termPair.first, factory).second += termPair.second;\r\n            }\r\n        }\r\n        else if (item instanceof Array) {\r\n            if (item.length !== 2) {\r\n                throw new Error('array must have length 2');\r\n            }\r\n            var value = item[0];\r\n            var value2 = item[1];\r\n            if (typeof value !== 'number') {\r\n                throw new Error('array item 0 must be a number');\r\n            }\r\n            if (value2 instanceof variable_1.Variable) {\r\n                terms.setDefault(value2, factory).second += value;\r\n            }\r\n            else if (value2 instanceof Expression) {\r\n                constant += value2.constant() * value;\r\n                var terms2 = value2.terms();\r\n                for (var j = 0, k = terms2.size(); j < k; j++) {\r\n                    var termPair = terms2.itemAt(j);\r\n                    terms.setDefault(termPair.first, factory).second +=\r\n                        termPair.second * value;\r\n                }\r\n            }\r\n            else {\r\n                throw new Error('array item 1 must be a variable or expression');\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('invalid Expression argument: ' + item);\r\n        }\r\n    }\r\n    return { terms: terms, constant: constant };\r\n}\r\n//# sourceMappingURL=expression.js.map","import * as React from 'react';\r\nimport { MouseEvent } from 'react';\r\n// import { EventDispatcher } from \"../../models\";\r\n// import { assert, layout } from \"../utils/util\";\r\n\r\nimport assert from '../utils/assert';\r\nimport layout from '../utils/layout';\r\n\r\nimport toCSSPx from '../utils/toCSSPx';\r\nimport {\r\n  Solver,\r\n  Variable,\r\n  Strength,\r\n  Constraint,\r\n  Operator\r\n} from '@ishikawa_masashi/cassowary';\r\nimport { SplitPane } from './SplitPane';\r\nimport { Resizer } from './Resizer';\r\n\r\nconst { useState, useEffect, useRef } = React;\r\nexport enum SplitOrientation {\r\n  Horizontal,\r\n  Vertical\r\n}\r\n\r\nexport interface SplitInfo {\r\n  min?: number;\r\n  max?: number;\r\n  value?: number;\r\n  resize?: 'fixed' | 'stretch';\r\n}\r\n\r\ntype Props = {\r\n  orientation: SplitOrientation;\r\n  onChange?: (splits: SplitInfo[]) => void;\r\n  splits?: SplitInfo[];\r\n  defaultSplit?: SplitInfo;\r\n  children: React.ReactNode;\r\n  name?: string; // TODO: Remove, for debugging.\r\n};\r\n\r\n// type State = {\r\n//   splits: SplitInfo[];\r\n// };\r\n\r\n// const onResizeBegin = new EventDispatcher(\"Resize Begin\");\r\n// const onResizeEnd = new EventDispatcher(\"Resize End\");\r\nexport const Split: React.FC<Props> = props => {\r\n  let containerRef = useRef<HTMLDivElement>(null);\r\n  let indexRef = useRef(-1);\r\n  let solverRef = useRef<Solver>();\r\n  let varsRef = useRef<Variable[]>();\r\n  let splitsRef = useRef<SplitInfo[]>([]);\r\n\r\n  const useForceUpdate = () => {\r\n    const [, setState] = useState();\r\n    return () => setState({});\r\n  };\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousemove', onResizerMouseMove as any);\r\n    document.addEventListener('mouseup', onResizerMouseUp);\r\n    const newSplits = canonicalizeSplits(props);\r\n    setupSolver(newSplits, getContainerSize(props.orientation));\r\n    querySolver(newSplits);\r\n    splitsRef.current = newSplits;\r\n    // forceUpdate();\r\n    props.onChange && props.onChange(newSplits);\r\n\r\n    return () => {\r\n      document.removeEventListener('mousemove', onResizerMouseMove as any);\r\n      document.removeEventListener('mouseup', onResizerMouseUp);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    onResizerMouseUp();\r\n    const splits = canonicalizeSplits(props);\r\n    setupSolver(splits, getContainerSize(props.orientation));\r\n    querySolver(splits);\r\n    splitsRef.current = splits;\r\n    forceUpdate();\r\n    layout();\r\n  }, [props]);\r\n\r\n  const onResizerMouseDown = (i: number) => {\r\n    indexRef.current = i;\r\n    const index = indexRef.current;\r\n    const vars = varsRef.current!;\r\n    const solver = solverRef.current!;\r\n    const varilable = vars[index + 1];\r\n    solver.removeEditVariable(varilable);\r\n    solver.addEditVariable(varilable, Strength.medium);\r\n    // Split.onResizeBegin.dispatch(this);\r\n    window.document.documentElement.style.pointerEvents = 'none';\r\n  };\r\n\r\n  /**\r\n   * This fires for all splits, even if the resizer doesn't belong to this split.\r\n   */\r\n  const onResizerMouseUp = () => {\r\n    if (indexRef.current < 0) {\r\n      return;\r\n    }\r\n    indexRef.current = -1;\r\n    // Split.onResizeEnd.dispatch(this);\r\n    window.document.documentElement.style.pointerEvents = 'auto';\r\n    const newSplits = splitsRef.current.slice();\r\n    querySolver(newSplits);\r\n    return props.onChange && props.onChange(newSplits);\r\n  };\r\n\r\n  const onResizerMouseMove = (e: MouseEvent<any>) => {\r\n    if (indexRef.current < 0) {\r\n      return;\r\n    }\r\n    const vars = varsRef.current!;\r\n    const isVertical = props.orientation === SplitOrientation.Vertical;\r\n    const container = containerRef.current!;\r\n    const rect = container.getBoundingClientRect();\r\n    const mouseOffset = isVertical\r\n      ? e.clientX - rect.left\r\n      : e.clientY - rect.top;\r\n\r\n    const index = indexRef.current;\r\n    const solver = solverRef.current!;\r\n    solver.suggestValue(vars[index + 1], mouseOffset);\r\n    // this.solver.resolve();\r\n    solver.updateVariables();\r\n    const newSplits = splitsRef.current.slice();\r\n    querySolver(newSplits);\r\n    forceUpdate();\r\n    e.preventDefault();\r\n  };\r\n\r\n  const querySolver = (splits: SplitInfo[]) => {\r\n    const vars = varsRef.current!;\r\n    for (let i = 0; i < splits.length; i++) {\r\n      splits[i].value = vars[i + 1].value() - vars[i].value();\r\n    }\r\n  };\r\n\r\n  const getContainerSize = (orientation: SplitOrientation): number => {\r\n    const container = containerRef.current!;\r\n    return orientation === SplitOrientation.Horizontal\r\n      ? container.clientHeight\r\n      : container.clientWidth;\r\n  };\r\n\r\n  const canonicalizeSplits = (props: Props): SplitInfo[] => {\r\n    const count = React.Children.count(props.children);\r\n    const containerSize = getContainerSize(props.orientation);\r\n    const result = [];\r\n    for (let i = 0; i < count; i++) {\r\n      let info = {};\r\n      if (props.splits && i < props.splits.length) {\r\n        info = Object.assign(info, props.splits[i]);\r\n      }\r\n      if (props.defaultSplit) {\r\n        info = Object.assign(props.defaultSplit, info);\r\n      }\r\n\r\n      result.push(\r\n        Object.assign(\r\n          {\r\n            min: 32,\r\n            max: containerSize\r\n          },\r\n          info\r\n        )\r\n      );\r\n    }\r\n    return result;\r\n  };\r\n\r\n  /**\r\n   * Initializes a Cassowary solver and the constraints based on split infos and container size.\r\n   */\r\n  const setupSolver = (splits: SplitInfo[], containerSize: number) => {\r\n    assert(indexRef.current < 0, 'Should not be in a dragging state.');\r\n    //const weak = Cassowary.Strength.weak;\r\n    //// const medium = Cassowary.Strength.medium;\r\n    //const strong = Cassowary.Strength.strong;\r\n    //const required = Cassowary.Strength.required;\r\n\r\n    ////function eq(a1: any, a2: any, strength: number, weight?: number) {\r\n    ////    return new Cassowary.Equation(a1, a2, strength || weak, weight || 0);\r\n    ////}\r\n\r\n    //function geq(a1: any, a2: any, strength: any, weight?: number) {\r\n    //  return new Cassowary.Inequality(a1, Cassowary.GEQ, a2, strength, weight);\r\n    //}\r\n\r\n    //function leq(a1: any, a2: any, strength: any, weight?: number) {\r\n    //  return new Cassowary.Inequality(a1, Cassowary.LEQ, a2, strength, weight);\r\n    //}\r\n\r\n    // f     1               2           3   ...    l\r\n    // |-----|---------------|-----------|----------|\r\n\r\n    // const vars: CassowaryVar[] = this.vars = [new Cassowary.Variable()];\r\n    varsRef.current = [new Variable()];\r\n    const vars = varsRef.current;\r\n    solverRef.current = new Solver();\r\n    const solver = solverRef.current;\r\n\r\n    // Create Cassowary variables, these the dragged position as an offset from the origin.\r\n    for (let i = 0; i < splits.length; i++) {\r\n      vars.push(new Variable());\r\n    }\r\n\r\n    solver.addEditVariable(vars[0], Strength.strong);\r\n    solver.suggestValue(vars[0], 0);\r\n\r\n    let cn = new Constraint(vars[0], Operator.Eq, 0);\r\n    solver.addConstraint(cn);\r\n\r\n    solver.addEditVariable(vars[vars.length - 1], Strength.strong);\r\n    solver.suggestValue(vars[vars.length - 1], containerSize);\r\n\r\n    cn = new Constraint(vars[vars.length - 1], Operator.Eq, containerSize);\r\n    solver.addConstraint(cn);\r\n\r\n    for (let i = 0; i < vars.length - 1; i++) {\r\n      const { min, max } = splits[i];\r\n      const left = vars[i];\r\n      const right = vars[i + 1];\r\n      solver.addConstraint(\r\n        new Constraint(right.minus(left), Operator.Ge, min, Strength.strong)\r\n      );\r\n      solver.addConstraint(\r\n        new Constraint(right.minus(left), Operator.Le, max, Strength.strong)\r\n      );\r\n    }\r\n\r\n    // Add stays for the variables representing the dragged panes. This causes them to\r\n    // try and remain in their dragged position unless the constraints prevent that.\r\n    for (let i = 1; i < vars.length - 1; i++) {\r\n      // solver.addStay(vars[i], weak);\r\n      solver.addEditVariable(vars[i], Strength.weak);\r\n      solver.suggestValue(vars[i], 10000);\r\n    }\r\n\r\n    suggestVarValues(splits);\r\n  };\r\n\r\n  const suggestVarValues = (splits: SplitInfo[]) => {\r\n    const vars = varsRef.current!;\r\n    const solver = solverRef.current!;\r\n    for (let i = 0; i < vars.length - 1; i++) {\r\n      const x = vars[i];\r\n      const y = vars[i + 1];\r\n\r\n      if (splits[i].value) {\r\n        if (i < vars.length - 2) {\r\n          solver.suggestValue(y, x.value() + splits[i].value!);\r\n        } else {\r\n          solver.suggestValue(x, y.value() - splits[i].value!);\r\n        }\r\n        solver.updateVariables();\r\n      }\r\n    }\r\n  };\r\n  const isHorizontal = props.orientation === SplitOrientation.Horizontal;\r\n  const count = React.Children.count(props.children);\r\n  const children: React.ReactNode[] = [];\r\n  React.Children.forEach(props.children, (child, i) => {\r\n    const style: React.CSSProperties = {};\r\n    if (i < count - 1 && i < splitsRef.current.length) {\r\n      style.flexBasis = toCSSPx(\r\n        Math.round(splitsRef.current[i].value as number)\r\n      );\r\n    } else {\r\n      style.flex = 1;\r\n    }\r\n\r\n    children.push(<SplitPane key={i} style={style} child={child} />);\r\n    if (i < count - 1) {\r\n      children.push(\r\n        <Resizer\r\n          key={`Resizer-${i}`}\r\n          orientation={props.orientation}\r\n          onMouseDown={ev => onResizerMouseDown(i)}\r\n        />\r\n      );\r\n    }\r\n  });\r\n  return (\r\n    <div\r\n      className=\"split\"\r\n      ref={containerRef}\r\n      style={{ flexDirection: isHorizontal ? 'column' : 'row' }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014, Nucleic Development Team.\r\n|\r\n| Distributed under the terms of the Modified BSD License.\r\n|\r\n| The full license is in the file COPYING.txt, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * @class Strength\r\n */\r\nvar Strength = /** @class */ (function () {\r\n    function Strength() {\r\n    }\r\n    /**\r\n     * Create a new symbolic strength.\r\n     *\r\n     * @param a strong\r\n     * @param b medium\r\n     * @param c weak\r\n     * @param [w] weight\r\n     * @return strength\r\n     */\r\n    Strength.create = function (a, b, c, w) {\r\n        if (w === void 0) { w = 1.0; }\r\n        var result = 0.0;\r\n        result += Math.max(0.0, Math.min(1000.0, a * w)) * 1000000.0;\r\n        result += Math.max(0.0, Math.min(1000.0, b * w)) * 1000.0;\r\n        result += Math.max(0.0, Math.min(1000.0, c * w));\r\n        return result;\r\n    };\r\n    /**\r\n     * Clip a symbolic strength to the allowed min and max.\r\n     * @private\r\n     */\r\n    Strength.clip = function (value) {\r\n        return Math.max(0.0, Math.min(Strength.required, value));\r\n    };\r\n    /**\r\n     * The 'required' symbolic strength.\r\n     */\r\n    Strength.required = Strength.create(1000.0, 1000.0, 1000.0);\r\n    /**\r\n     * The 'strong' symbolic strength.\r\n     */\r\n    Strength.strong = Strength.create(1.0, 0.0, 0.0);\r\n    /**\r\n     * The 'medium' symbolic strength.\r\n     */\r\n    Strength.medium = Strength.create(0.0, 1.0, 0.0);\r\n    /**\r\n     * The 'weak' symbolic strength.\r\n     */\r\n    Strength.weak = Strength.create(0.0, 0.0, 1.0);\r\n    return Strength;\r\n}());\r\nexports.Strength = Strength;\r\n//# sourceMappingURL=strength.js.map","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014, Nucleic Development Team.\r\n|\r\n| Distributed under the terms of the Modified BSD License.\r\n|\r\n| The full license is in the file COPYING.txt, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar expression_1 = require(\"./expression\");\r\nvar strength_1 = require(\"./strength\");\r\n/**\r\n * An enum defining the linear constraint operators.\r\n *\r\n * |Value|Operator|Description|\r\n * |----|-----|-----|\r\n * |`Le`|<=|Less than equal|\r\n * |`Ge`|>=|Greater than equal|\r\n * |`Eq`|==|Equal|\r\n *\r\n * @enum {Number}\r\n */\r\nvar Operator;\r\n(function (Operator) {\r\n    Operator[Operator[\"Le\"] = 0] = \"Le\";\r\n    Operator[Operator[\"Ge\"] = 1] = \"Ge\";\r\n    Operator[Operator[\"Eq\"] = 2] = \"Eq\"; // ==\r\n})(Operator = exports.Operator || (exports.Operator = {}));\r\n/**\r\n * A linear constraint equation.\r\n *\r\n * A constraint equation is composed of an expression, an operator,\r\n * and a strength. The RHS of the equation is implicitly zero.\r\n *\r\n * @class\r\n * @param {Expression} expression The constraint expression (LHS).\r\n * @param {Operator} operator The equation operator.\r\n * @param {Expression} [rhs] Right hand side of the expression.\r\n * @param {Number} [strength=Strength.required] The strength of the constraint.\r\n */\r\nvar Constraint = /** @class */ (function () {\r\n    function Constraint(expression, operator, rhs, strength) {\r\n        if (strength === void 0) { strength = strength_1.Strength.required; }\r\n        this._id = CnId++;\r\n        this._operator = operator;\r\n        this._strength = strength_1.Strength.clip(strength);\r\n        if (rhs === undefined && expression instanceof expression_1.Expression) {\r\n            this._expression = expression;\r\n        }\r\n        else {\r\n            this._expression = expression.minus(rhs);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the unique id number of the constraint.\r\n     * @private\r\n     */\r\n    Constraint.prototype.id = function () {\r\n        return this._id;\r\n    };\r\n    /**\r\n     * Returns the expression of the constraint.\r\n     *\r\n     * @return {Expression} expression\r\n     */\r\n    Constraint.prototype.expression = function () {\r\n        return this._expression;\r\n    };\r\n    /**\r\n     * Returns the relational operator of the constraint.\r\n     *\r\n     * @return {Operator} linear constraint operator\r\n     */\r\n    Constraint.prototype.op = function () {\r\n        return this._operator;\r\n    };\r\n    /**\r\n     * Returns the strength of the constraint.\r\n     *\r\n     * @return {Number} strength\r\n     */\r\n    Constraint.prototype.strength = function () {\r\n        return this._strength;\r\n    };\r\n    Constraint.prototype.toString = function () {\r\n        return (this._expression.toString() +\r\n            ' ' +\r\n            ['<=', '>=', '='][this._operator] +\r\n            ' 0 (' +\r\n            this._strength.toString() +\r\n            ')');\r\n    };\r\n    return Constraint;\r\n}());\r\nexports.Constraint = Constraint;\r\n/**\r\n * The internal constraint id counter.\r\n * @private\r\n */\r\nvar CnId = 0;\r\n//# sourceMappingURL=constraint.js.map","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014, Nucleic Development Team.\r\n|\r\n| Distributed under the terms of the Modified BSD License.\r\n|\r\n| The full license is in the file COPYING.txt, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction createMap() {\r\n    return new IndexedMap();\r\n}\r\nexports.createMap = createMap;\r\nvar IndexedMap = /** @class */ (function () {\r\n    function IndexedMap() {\r\n        this.index = {};\r\n        this.array = [];\r\n    }\r\n    /**\r\n     * Returns the number of items in the array.\r\n     */\r\n    IndexedMap.prototype.size = function () {\r\n        return this.array.length;\r\n    };\r\n    /**\r\n     * Returns true if the array is empty.\r\n     */\r\n    IndexedMap.prototype.empty = function () {\r\n        return this.array.length === 0;\r\n    };\r\n    /**\r\n     * Returns the item at the given array index.\r\n     *\r\n     * @param index The integer index of the desired item.\r\n     */\r\n    IndexedMap.prototype.itemAt = function (index) {\r\n        return this.array[index];\r\n    };\r\n    /**\r\n     * Returns true if the key is in the array, false otherwise.\r\n     *\r\n     * @param key The key to locate in the array.\r\n     */\r\n    IndexedMap.prototype.contains = function (key) {\r\n        return this.index[key.id()] !== undefined;\r\n    };\r\n    /**\r\n     * Returns the pair associated with the given key, or undefined.\r\n     *\r\n     * @param key The key to locate in the array.\r\n     */\r\n    IndexedMap.prototype.find = function (key) {\r\n        var i = this.index[key.id()];\r\n        return i === undefined ? undefined : this.array[i];\r\n    };\r\n    /**\r\n     * Returns the pair associated with the key if it exists.\r\n     *\r\n     * If the key does not exist, a new pair will be created and\r\n     * inserted using the value created by the given factory.\r\n     *\r\n     * @param key The key to locate in the array.\r\n     * @param factory The function which creates the default value.\r\n     */\r\n    IndexedMap.prototype.setDefault = function (key, factory) {\r\n        var i = this.index[key.id()];\r\n        if (i === undefined) {\r\n            var pair = new Pair(key, factory());\r\n            this.index[key.id()] = this.array.length;\r\n            this.array.push(pair);\r\n            return pair;\r\n        }\r\n        else {\r\n            return this.array[i];\r\n        }\r\n    };\r\n    /**\r\n     * Insert the pair into the array and return the pair.\r\n     *\r\n     * This will overwrite any existing entry in the array.\r\n     *\r\n     * @param key The key portion of the pair.\r\n     * @param value The value portion of the pair.\r\n     */\r\n    IndexedMap.prototype.insert = function (key, value) {\r\n        var pair = new Pair(key, value);\r\n        var i = this.index[key.id()];\r\n        if (i === undefined) {\r\n            this.index[key.id()] = this.array.length;\r\n            this.array.push(pair);\r\n        }\r\n        else {\r\n            this.array[i] = pair;\r\n        }\r\n        return pair;\r\n    };\r\n    /**\r\n     * Removes and returns the pair for the given key, or undefined.\r\n     *\r\n     * @param key The key to remove from the map.\r\n     */\r\n    IndexedMap.prototype.erase = function (key) {\r\n        var i = this.index[key.id()];\r\n        if (i === undefined) {\r\n            return undefined;\r\n        }\r\n        this.index[key.id()] = undefined;\r\n        var pair = this.array[i];\r\n        var last = this.array.pop();\r\n        if (pair !== last) {\r\n            this.array[i] = last;\r\n            this.index[last.first.id()] = i;\r\n        }\r\n        return pair;\r\n    };\r\n    /**\r\n     * Create a copy of this associative array.\r\n     */\r\n    IndexedMap.prototype.copy = function () {\r\n        var copy = new IndexedMap();\r\n        for (var i = 0; i < this.array.length; i++) {\r\n            var pair = this.array[i].copy();\r\n            copy.array[i] = pair;\r\n            copy.index[pair.first.id()] = i;\r\n        }\r\n        return copy;\r\n    };\r\n    return IndexedMap;\r\n}());\r\n/**\r\n * A class which defines a generic pair object.\r\n * @private\r\n */\r\n// tslint:disable: max-classes-per-file\r\nvar Pair = /** @class */ (function () {\r\n    /**\r\n     * Construct a new Pair object.\r\n     *\r\n     * @param first The first item of the pair.\r\n     * @param second The second item of the pair.\r\n     */\r\n    function Pair(first, second) {\r\n        this.first = first;\r\n        this.second = second;\r\n    }\r\n    /**\r\n     * Create a copy of the pair.\r\n     */\r\n    Pair.prototype.copy = function () {\r\n        return new Pair(this.first, this.second);\r\n    };\r\n    return Pair;\r\n}());\r\n//# sourceMappingURL=maptype.js.map","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014, Nucleic Development Team.\r\n|\r\n| Distributed under the terms of the Modified BSD License.\r\n|\r\n| The full license is in the file COPYING.txt, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar expression_1 = require(\"./expression\");\r\n/**\r\n * The primary user constraint variable.\r\n *\r\n * @class\r\n * @param {String} [name=\"\"] The name to associated with the variable.\r\n */\r\nvar Variable = /** @class */ (function () {\r\n    function Variable(name) {\r\n        if (name === void 0) { name = ''; }\r\n        this._value = 0.0;\r\n        this._context = null;\r\n        this._id = VarId++;\r\n        this._name = name;\r\n    }\r\n    /**\r\n     * Returns the unique id number of the variable.\r\n     * @private\r\n     */\r\n    Variable.prototype.id = function () {\r\n        return this._id;\r\n    };\r\n    /**\r\n     * Returns the name of the variable.\r\n     *\r\n     * @return {String} name of the variable\r\n     */\r\n    Variable.prototype.name = function () {\r\n        return this._name;\r\n    };\r\n    /**\r\n     * Set the name of the variable.\r\n     *\r\n     * @param {String} name Name of the variable\r\n     */\r\n    Variable.prototype.setName = function (name) {\r\n        this._name = name;\r\n    };\r\n    /**\r\n     * Returns the user context object of the variable.\r\n     * @private\r\n     */\r\n    Variable.prototype.context = function () {\r\n        return this._context;\r\n    };\r\n    /**\r\n     * Set the user context object of the variable.\r\n     * @private\r\n     */\r\n    Variable.prototype.setContext = function (context) {\r\n        this._context = context;\r\n    };\r\n    /**\r\n     * Returns the value of the variable.\r\n     *\r\n     * @return {Number} Calculated value\r\n     */\r\n    Variable.prototype.value = function () {\r\n        return this._value;\r\n    };\r\n    /**\r\n     * Set the value of the variable.\r\n     * @private\r\n     */\r\n    Variable.prototype.setValue = function (value) {\r\n        this._value = value;\r\n    };\r\n    /**\r\n     * Creates a new Expression by adding a number, variable or expression\r\n     * to the variable.\r\n     *\r\n     * @param {Number|Variable|Expression} value Value to add.\r\n     * @return {Expression} expression\r\n     */\r\n    Variable.prototype.plus = function (value) {\r\n        return new expression_1.Expression(this, value);\r\n    };\r\n    /**\r\n     * Creates a new Expression by substracting a number, variable or expression\r\n     * from the variable.\r\n     *\r\n     * @param {Number|Variable|Expression} value Value to substract.\r\n     * @return {Expression} expression\r\n     */\r\n    Variable.prototype.minus = function (value) {\r\n        return new expression_1.Expression(this, typeof value === 'number' ? -value : [-1, value]);\r\n    };\r\n    /**\r\n     * Creates a new Expression by multiplying with a fixed number.\r\n     *\r\n     * @param {Number} coefficient Coefficient to multiply with.\r\n     * @return {Expression} expression\r\n     */\r\n    Variable.prototype.multiply = function (coefficient) {\r\n        return new expression_1.Expression([coefficient, this]);\r\n    };\r\n    /**\r\n     * Creates a new Expression by dividing with a fixed number.\r\n     *\r\n     * @param {Number} coefficient Coefficient to divide by.\r\n     * @return {Expression} expression\r\n     */\r\n    Variable.prototype.divide = function (coefficient) {\r\n        return new expression_1.Expression([1 / coefficient, this]);\r\n    };\r\n    /**\r\n     * Returns the JSON representation of the variable.\r\n     * @private\r\n     */\r\n    Variable.prototype.toJSON = function () {\r\n        return {\r\n            name: this._name,\r\n            value: this._value\r\n        };\r\n    };\r\n    Variable.prototype.toString = function () {\r\n        return this._context + '[' + this._name + ':' + this._value + ']';\r\n    };\r\n    return Variable;\r\n}());\r\nexports.Variable = Variable;\r\n/**\r\n * The internal variable id counter.\r\n * @private\r\n */\r\nvar VarId = 0;\r\n//# sourceMappingURL=variable.js.map","export { Split } from './components/Split';\nexport { SplitOrientation } from './components/Split';\nexport { SplitInfo } from './components/Split';\n","export default function assert(c: any, message?: string) {\r\n  if (!c) {\r\n    throw new Error(message);\r\n  }\r\n}\r\n","const layoutThrottleDuration = 10;\r\nlet layoutTimeout = 0;\r\n\r\nexport default function layout() {\r\n  if (layoutTimeout) {\r\n    window.clearTimeout(layoutTimeout);\r\n  }\r\n  window.setTimeout(() => {\r\n    layoutTimeout = 0;\r\n    document.dispatchEvent(new Event('layout'));\r\n  }, layoutThrottleDuration);\r\n}\r\n","export default function toCSSPx(x: number) {\r\n  return (x | 0) + 'px';\r\n}\r\n","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2018, Nucleic Development Team & H. Rutjes.\r\n|\r\n| Distributed under the terms of the Modified BSD License.\r\n|\r\n| The full license is in the file COPYING.txt, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./constraint\"));\r\n__export(require(\"./expression\"));\r\n__export(require(\"./solver\"));\r\n__export(require(\"./strength\"));\r\n__export(require(\"./variable\"));\r\n//# sourceMappingURL=index.js.map","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014, Nucleic Development Team.\r\n|\r\n| Distributed under the terms of the Modified BSD License.\r\n|\r\n| The full license is in the file COPYING.txt, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar constraint_1 = require(\"./constraint\");\r\nvar expression_1 = require(\"./expression\");\r\nvar maptype_1 = require(\"./maptype\");\r\nvar strength_1 = require(\"./strength\");\r\n/**\r\n * The constraint solver class.\r\n *\r\n * @class\r\n */\r\nvar Solver = /** @class */ (function () {\r\n    /**\r\n     * Construct a new Solver.\r\n     */\r\n    function Solver() {\r\n        this._cnMap = createCnMap();\r\n        this._rowMap = createRowMap();\r\n        this._varMap = createVarMap();\r\n        this._editMap = createEditMap();\r\n        this._infeasibleRows = [];\r\n        this._objective = new Row();\r\n        this._artificial = null;\r\n        this._idTick = 0;\r\n    }\r\n    /**\r\n     * Creates and add a constraint to the solver.\r\n     *\r\n     * @param {Expression|Variable} lhs Left hand side of the expression\r\n     * @param {Operator} operator Operator\r\n     * @param {Expression|Variable|Number} rhs Right hand side of the expression\r\n     * @param {Number} [strength=Strength.required] Strength\r\n     */\r\n    Solver.prototype.createConstraint = function (lhs, operator, rhs, strength) {\r\n        if (strength === void 0) { strength = strength_1.Strength.required; }\r\n        var cn = new constraint_1.Constraint(lhs, operator, rhs, strength);\r\n        this.addConstraint(cn);\r\n        return cn;\r\n    };\r\n    /**\r\n     * Add a constraint to the solver.\r\n     *\r\n     * @param {Constraint} constraint Constraint to add to the solver\r\n     */\r\n    Solver.prototype.addConstraint = function (constraint) {\r\n        var cnPair = this._cnMap.find(constraint);\r\n        if (cnPair !== undefined) {\r\n            throw new Error('duplicate constraint');\r\n        }\r\n        // Creating a row causes symbols to be reserved for the variables\r\n        // in the constraint. If this method exits with an exception,\r\n        // then its possible those variables will linger in the var map.\r\n        // Since its likely that those variables will be used in other\r\n        // constraints and since exceptional conditions are uncommon,\r\n        // i'm not too worried about aggressive cleanup of the var map.\r\n        var data = this._createRow(constraint);\r\n        var row = data.row;\r\n        var tag = data.tag;\r\n        var subject = this._chooseSubject(row, tag);\r\n        // If chooseSubject couldnt find a valid entering symbol, one\r\n        // last option is available if the entire row is composed of\r\n        // dummy variables. If the constant of the row is zero, then\r\n        // this represents redundant constraints and the new dummy\r\n        // marker can enter the basis. If the constant is non-zero,\r\n        // then it represents an unsatisfiable constraint.\r\n        if (subject.type() === SymbolType.Invalid && row.allDummies()) {\r\n            if (!nearZero(row.constant())) {\r\n                throw new Error('unsatisfiable constraint');\r\n            }\r\n            else {\r\n                subject = tag.marker;\r\n            }\r\n        }\r\n        // If an entering symbol still isn't found, then the row must\r\n        // be added using an artificial variable. If that fails, then\r\n        // the row represents an unsatisfiable constraint.\r\n        if (subject.type() === SymbolType.Invalid) {\r\n            if (!this._addWithArtificialVariable(row)) {\r\n                throw new Error('unsatisfiable constraint');\r\n            }\r\n        }\r\n        else {\r\n            row.solveFor(subject);\r\n            this._substitute(subject, row);\r\n            this._rowMap.insert(subject, row);\r\n        }\r\n        this._cnMap.insert(constraint, tag);\r\n        // Optimizing after each constraint is added performs less\r\n        // aggregate work due to a smaller average system size. It\r\n        // also ensures the solver remains in a consistent state.\r\n        this._optimize(this._objective);\r\n    };\r\n    /**\r\n     * Remove a constraint from the solver.\r\n     *\r\n     * @param {Constraint} constraint Constraint to remove from the solver\r\n     */\r\n    Solver.prototype.removeConstraint = function (constraint) {\r\n        var cnPair = this._cnMap.erase(constraint);\r\n        if (cnPair === undefined) {\r\n            throw new Error('unknown constraint');\r\n        }\r\n        // Remove the error effects from the objective function\r\n        // *before* pivoting, or substitutions into the objective\r\n        // will lead to incorrect solver results.\r\n        this._removeConstraintEffects(constraint, cnPair.second);\r\n        // If the marker is basic, simply drop the row. Otherwise,\r\n        // pivot the marker into the basis and then drop the row.\r\n        var marker = cnPair.second.marker;\r\n        var rowPair = this._rowMap.erase(marker);\r\n        if (rowPair === undefined) {\r\n            var leaving = this._getMarkerLeavingSymbol(marker);\r\n            if (leaving.type() === SymbolType.Invalid) {\r\n                throw new Error('failed to find leaving row');\r\n            }\r\n            rowPair = this._rowMap.erase(leaving);\r\n            rowPair.second.solveForEx(leaving, marker);\r\n            this._substitute(marker, rowPair.second);\r\n        }\r\n        // Optimizing after each constraint is removed ensures that the\r\n        // solver remains consistent. It makes the solver api easier to\r\n        // use at a small tradeoff for speed.\r\n        this._optimize(this._objective);\r\n    };\r\n    /**\r\n     * Test whether the solver contains the constraint.\r\n     *\r\n     * @param {Constraint} constraint Constraint to test for\r\n     * @return {Bool} true or false\r\n     */\r\n    Solver.prototype.hasConstraint = function (constraint) {\r\n        return this._cnMap.contains(constraint);\r\n    };\r\n    /**\r\n     * Add an edit variable to the solver.\r\n     *\r\n     * @param {Variable} variable Edit variable to add to the solver\r\n     * @param {Number} strength Strength, should be less than `Strength.required`\r\n     */\r\n    Solver.prototype.addEditVariable = function (variable, strength) {\r\n        var editPair = this._editMap.find(variable);\r\n        if (editPair !== undefined) {\r\n            throw new Error('duplicate edit variable');\r\n        }\r\n        strength = strength_1.Strength.clip(strength);\r\n        if (strength === strength_1.Strength.required) {\r\n            throw new Error('bad required strength');\r\n        }\r\n        var expr = new expression_1.Expression(variable);\r\n        var cn = new constraint_1.Constraint(expr, constraint_1.Operator.Eq, undefined, strength);\r\n        this.addConstraint(cn);\r\n        var tag = this._cnMap.find(cn).second;\r\n        var info = { tag: tag, constraint: cn, constant: 0.0 };\r\n        this._editMap.insert(variable, info);\r\n    };\r\n    /**\r\n     * Remove an edit variable from the solver.\r\n     *\r\n     * @param {Variable} variable Edit variable to remove from the solver\r\n     */\r\n    Solver.prototype.removeEditVariable = function (variable) {\r\n        var editPair = this._editMap.erase(variable);\r\n        if (editPair === undefined) {\r\n            throw new Error('unknown edit variable');\r\n        }\r\n        this.removeConstraint(editPair.second.constraint);\r\n    };\r\n    /**\r\n     * Test whether the solver contains the edit variable.\r\n     *\r\n     * @param {Variable} variable Edit variable to test for\r\n     * @return {Bool} true or false\r\n     */\r\n    Solver.prototype.hasEditVariable = function (variable) {\r\n        return this._editMap.contains(variable);\r\n    };\r\n    /**\r\n     * Suggest the value of an edit variable.\r\n     *\r\n     * @param {Variable} variable Edit variable to suggest a value for\r\n     * @param {Number} value Suggested value\r\n     */\r\n    Solver.prototype.suggestValue = function (variable, value) {\r\n        var editPair = this._editMap.find(variable);\r\n        if (editPair === undefined) {\r\n            throw new Error('unknown edit variable');\r\n        }\r\n        var rows = this._rowMap;\r\n        var info = editPair.second;\r\n        var delta = value - info.constant;\r\n        info.constant = value;\r\n        // Check first if the positive error variable is basic.\r\n        var marker = info.tag.marker;\r\n        var rowPair = rows.find(marker);\r\n        if (rowPair !== undefined) {\r\n            if (rowPair.second.add(-delta) < 0.0) {\r\n                this._infeasibleRows.push(marker);\r\n            }\r\n            this._dualOptimize();\r\n            return;\r\n        }\r\n        // Check next if the negative error variable is basic.\r\n        var other = info.tag.other;\r\n        rowPair = rows.find(other);\r\n        if (rowPair !== undefined) {\r\n            if (rowPair.second.add(delta) < 0.0) {\r\n                this._infeasibleRows.push(other);\r\n            }\r\n            this._dualOptimize();\r\n            return;\r\n        }\r\n        // Otherwise update each row where the error variables exist.\r\n        for (var i = 0, n = rows.size(); i < n; ++i) {\r\n            var rowPair_1 = rows.itemAt(i);\r\n            var row = rowPair_1.second;\r\n            var coeff = row.coefficientFor(marker);\r\n            if (coeff !== 0.0 &&\r\n                row.add(delta * coeff) < 0.0 &&\r\n                rowPair_1.first.type() !== SymbolType.External) {\r\n                this._infeasibleRows.push(rowPair_1.first);\r\n            }\r\n        }\r\n        this._dualOptimize();\r\n    };\r\n    /**\r\n     * Update the values of the variables.\r\n     */\r\n    Solver.prototype.updateVariables = function () {\r\n        var vars = this._varMap;\r\n        var rows = this._rowMap;\r\n        for (var i = 0, n = vars.size(); i < n; ++i) {\r\n            var pair = vars.itemAt(i);\r\n            var rowPair = rows.find(pair.second);\r\n            if (rowPair !== undefined) {\r\n                pair.first.setValue(rowPair.second.constant());\r\n            }\r\n            else {\r\n                pair.first.setValue(0.0);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Get the symbol for the given variable.\r\n     *\r\n     * If a symbol does not exist for the variable, one will be created.\r\n     * @private\r\n     */\r\n    Solver.prototype._getVarSymbol = function (variable) {\r\n        var _this = this;\r\n        var factory = function () { return _this._makeSymbol(SymbolType.External); };\r\n        return this._varMap.setDefault(variable, factory).second;\r\n    };\r\n    /**\r\n     * Create a new Row object for the given constraint.\r\n     *\r\n     * The terms in the constraint will be converted to cells in the row.\r\n     * Any term in the constraint with a coefficient of zero is ignored.\r\n     * This method uses the `_getVarSymbol` method to get the symbol for\r\n     * the variables added to the row. If the symbol for a given cell\r\n     * variable is basic, the cell variable will be substituted with the\r\n     * basic row.\r\n     *\r\n     * The necessary slack and error variables will be added to the row.\r\n     * If the constant for the row is negative, the sign for the row\r\n     * will be inverted so the constant becomes positive.\r\n     *\r\n     * Returns the created Row and the tag for tracking the constraint.\r\n     * @private\r\n     */\r\n    Solver.prototype._createRow = function (constraint) {\r\n        var expr = constraint.expression();\r\n        var row = new Row(expr.constant());\r\n        // Substitute the current basic variables into the row.\r\n        var terms = expr.terms();\r\n        for (var i = 0, n = terms.size(); i < n; ++i) {\r\n            var termPair = terms.itemAt(i);\r\n            if (!nearZero(termPair.second)) {\r\n                var symbol = this._getVarSymbol(termPair.first);\r\n                var basicPair = this._rowMap.find(symbol);\r\n                if (basicPair !== undefined) {\r\n                    row.insertRow(basicPair.second, termPair.second);\r\n                }\r\n                else {\r\n                    row.insertSymbol(symbol, termPair.second);\r\n                }\r\n            }\r\n        }\r\n        // Add the necessary slack, error, and dummy variables.\r\n        var objective = this._objective;\r\n        var strength = constraint.strength();\r\n        var tag = { marker: INVALID_SYMBOL, other: INVALID_SYMBOL };\r\n        switch (constraint.op()) {\r\n            case constraint_1.Operator.Le:\r\n            case constraint_1.Operator.Ge: {\r\n                var coeff = constraint.op() === constraint_1.Operator.Le ? 1.0 : -1.0;\r\n                var slack = this._makeSymbol(SymbolType.Slack);\r\n                tag.marker = slack;\r\n                row.insertSymbol(slack, coeff);\r\n                if (strength < strength_1.Strength.required) {\r\n                    var error = this._makeSymbol(SymbolType.Error);\r\n                    tag.other = error;\r\n                    row.insertSymbol(error, -coeff);\r\n                    objective.insertSymbol(error, strength);\r\n                }\r\n                break;\r\n            }\r\n            case constraint_1.Operator.Eq: {\r\n                if (strength < strength_1.Strength.required) {\r\n                    var errplus = this._makeSymbol(SymbolType.Error);\r\n                    var errminus = this._makeSymbol(SymbolType.Error);\r\n                    tag.marker = errplus;\r\n                    tag.other = errminus;\r\n                    row.insertSymbol(errplus, -1.0); // v = eplus - eminus\r\n                    row.insertSymbol(errminus, 1.0); // v - eplus + eminus = 0\r\n                    objective.insertSymbol(errplus, strength);\r\n                    objective.insertSymbol(errminus, strength);\r\n                }\r\n                else {\r\n                    var dummy = this._makeSymbol(SymbolType.Dummy);\r\n                    tag.marker = dummy;\r\n                    row.insertSymbol(dummy);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        // Ensure the row has a positive constant.\r\n        if (row.constant() < 0.0) {\r\n            row.reverseSign();\r\n        }\r\n        return { row: row, tag: tag };\r\n    };\r\n    /**\r\n     * Choose the subject for solving for the row.\r\n     *\r\n     * This method will choose the best subject for using as the solve\r\n     * target for the row. An invalid symbol will be returned if there\r\n     * is no valid target.\r\n     *\r\n     * The symbols are chosen according to the following precedence:\r\n     *\r\n     * 1) The first symbol representing an external variable.\r\n     * 2) A negative slack or error tag variable.\r\n     *\r\n     * If a subject cannot be found, an invalid symbol will be returned.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._chooseSubject = function (row, tag) {\r\n        var cells = row.cells();\r\n        for (var i = 0, n = cells.size(); i < n; ++i) {\r\n            var pair = cells.itemAt(i);\r\n            if (pair.first.type() === SymbolType.External) {\r\n                return pair.first;\r\n            }\r\n        }\r\n        var type = tag.marker.type();\r\n        if (type === SymbolType.Slack || type === SymbolType.Error) {\r\n            if (row.coefficientFor(tag.marker) < 0.0) {\r\n                return tag.marker;\r\n            }\r\n        }\r\n        type = tag.other.type();\r\n        if (type === SymbolType.Slack || type === SymbolType.Error) {\r\n            if (row.coefficientFor(tag.other) < 0.0) {\r\n                return tag.other;\r\n            }\r\n        }\r\n        return INVALID_SYMBOL;\r\n    };\r\n    /**\r\n     * Add the row to the tableau using an artificial variable.\r\n     *\r\n     * This will return false if the constraint cannot be satisfied.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._addWithArtificialVariable = function (row) {\r\n        // Create and add the artificial variable to the tableau.\r\n        var art = this._makeSymbol(SymbolType.Slack);\r\n        this._rowMap.insert(art, row.copy());\r\n        this._artificial = row.copy();\r\n        // Optimize the artificial objective. This is successful\r\n        // only if the artificial objective is optimized to zero.\r\n        this._optimize(this._artificial);\r\n        var success = nearZero(this._artificial.constant());\r\n        this._artificial = null;\r\n        // If the artificial variable is basic, pivot the row so that\r\n        // it becomes non-basic. If the row is constant, exit early.\r\n        var pair = this._rowMap.erase(art);\r\n        if (pair !== undefined) {\r\n            var basicRow = pair.second;\r\n            if (basicRow.isConstant()) {\r\n                return success;\r\n            }\r\n            var entering = this._anyPivotableSymbol(basicRow);\r\n            if (entering.type() === SymbolType.Invalid) {\r\n                return false; // unsatisfiable (will this ever happen?)\r\n            }\r\n            basicRow.solveForEx(art, entering);\r\n            this._substitute(entering, basicRow);\r\n            this._rowMap.insert(entering, basicRow);\r\n        }\r\n        // Remove the artificial variable from the tableau.\r\n        var rows = this._rowMap;\r\n        for (var i = 0, n = rows.size(); i < n; ++i) {\r\n            rows.itemAt(i).second.removeSymbol(art);\r\n        }\r\n        this._objective.removeSymbol(art);\r\n        return success;\r\n    };\r\n    /**\r\n     * Substitute the parametric symbol with the given row.\r\n     *\r\n     * This method will substitute all instances of the parametric symbol\r\n     * in the tableau and the objective function with the given row.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._substitute = function (symbol, row) {\r\n        var rows = this._rowMap;\r\n        for (var i = 0, n = rows.size(); i < n; ++i) {\r\n            var pair = rows.itemAt(i);\r\n            pair.second.substitute(symbol, row);\r\n            if (pair.second.constant() < 0.0 &&\r\n                pair.first.type() !== SymbolType.External) {\r\n                this._infeasibleRows.push(pair.first);\r\n            }\r\n        }\r\n        this._objective.substitute(symbol, row);\r\n        if (this._artificial) {\r\n            this._artificial.substitute(symbol, row);\r\n        }\r\n    };\r\n    /**\r\n     * Optimize the system for the given objective function.\r\n     *\r\n     * This method performs iterations of Phase 2 of the simplex method\r\n     * until the objective function reaches a minimum.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._optimize = function (objective) {\r\n        while (true) {\r\n            var entering = this._getEnteringSymbol(objective);\r\n            if (entering.type() === SymbolType.Invalid) {\r\n                return;\r\n            }\r\n            var leaving = this._getLeavingSymbol(entering);\r\n            if (leaving.type() === SymbolType.Invalid) {\r\n                throw new Error('the objective is unbounded');\r\n            }\r\n            // pivot the entering symbol into the basis\r\n            var row = this._rowMap.erase(leaving).second;\r\n            row.solveForEx(leaving, entering);\r\n            this._substitute(entering, row);\r\n            this._rowMap.insert(entering, row);\r\n        }\r\n    };\r\n    /**\r\n     * Optimize the system using the dual of the simplex method.\r\n     *\r\n     * The current state of the system should be such that the objective\r\n     * function is optimal, but not feasible. This method will perform\r\n     * an iteration of the dual simplex method to make the solution both\r\n     * optimal and feasible.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._dualOptimize = function () {\r\n        var rows = this._rowMap;\r\n        var infeasible = this._infeasibleRows;\r\n        while (infeasible.length !== 0) {\r\n            var leaving = infeasible.pop();\r\n            var pair = rows.find(leaving);\r\n            if (pair !== undefined && pair.second.constant() < 0.0) {\r\n                var entering = this._getDualEnteringSymbol(pair.second);\r\n                if (entering.type() === SymbolType.Invalid) {\r\n                    throw new Error('dual optimize failed');\r\n                }\r\n                // pivot the entering symbol into the basis\r\n                var row = pair.second;\r\n                rows.erase(leaving);\r\n                row.solveForEx(leaving, entering);\r\n                this._substitute(entering, row);\r\n                rows.insert(entering, row);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Compute the entering variable for a pivot operation.\r\n     *\r\n     * This method will return first symbol in the objective function which\r\n     * is non-dummy and has a coefficient less than zero. If no symbol meets\r\n     * the criteria, it means the objective function is at a minimum, and an\r\n     * invalid symbol is returned.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._getEnteringSymbol = function (objective) {\r\n        var cells = objective.cells();\r\n        for (var i = 0, n = cells.size(); i < n; ++i) {\r\n            var pair = cells.itemAt(i);\r\n            var symbol = pair.first;\r\n            if (pair.second < 0.0 && symbol.type() !== SymbolType.Dummy) {\r\n                return symbol;\r\n            }\r\n        }\r\n        return INVALID_SYMBOL;\r\n    };\r\n    /**\r\n     * Compute the entering symbol for the dual optimize operation.\r\n     *\r\n     * This method will return the symbol in the row which has a positive\r\n     * coefficient and yields the minimum ratio for its respective symbol\r\n     * in the objective function. The provided row *must* be infeasible.\r\n     * If no symbol is found which meats the criteria, an invalid symbol\r\n     * is returned.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._getDualEnteringSymbol = function (row) {\r\n        var ratio = Number.MAX_VALUE;\r\n        var entering = INVALID_SYMBOL;\r\n        var cells = row.cells();\r\n        for (var i = 0, n = cells.size(); i < n; ++i) {\r\n            var pair = cells.itemAt(i);\r\n            var symbol = pair.first;\r\n            var c = pair.second;\r\n            if (c > 0.0 && symbol.type() !== SymbolType.Dummy) {\r\n                var coeff = this._objective.coefficientFor(symbol);\r\n                var r = coeff / c;\r\n                if (r < ratio) {\r\n                    ratio = r;\r\n                    entering = symbol;\r\n                }\r\n            }\r\n        }\r\n        return entering;\r\n    };\r\n    /**\r\n     * Compute the symbol for pivot exit row.\r\n     *\r\n     * This method will return the symbol for the exit row in the row\r\n     * map. If no appropriate exit symbol is found, an invalid symbol\r\n     * will be returned. This indicates that the objective function is\r\n     * unbounded.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._getLeavingSymbol = function (entering) {\r\n        var ratio = Number.MAX_VALUE;\r\n        var found = INVALID_SYMBOL;\r\n        var rows = this._rowMap;\r\n        for (var i = 0, n = rows.size(); i < n; ++i) {\r\n            var pair = rows.itemAt(i);\r\n            var symbol = pair.first;\r\n            if (symbol.type() !== SymbolType.External) {\r\n                var row = pair.second;\r\n                var temp = row.coefficientFor(entering);\r\n                if (temp < 0.0) {\r\n                    var temp_ratio = -row.constant() / temp;\r\n                    if (temp_ratio < ratio) {\r\n                        ratio = temp_ratio;\r\n                        found = symbol;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return found;\r\n    };\r\n    /**\r\n     * Compute the leaving symbol for a marker variable.\r\n     *\r\n     * This method will return a symbol corresponding to a basic row\r\n     * which holds the given marker variable. The row will be chosen\r\n     * according to the following precedence:\r\n     *\r\n     * 1) The row with a restricted basic varible and a negative coefficient\r\n     *    for the marker with the smallest ratio of -constant / coefficient.\r\n     *\r\n     * 2) The row with a restricted basic variable and the smallest ratio\r\n     *    of constant / coefficient.\r\n     *\r\n     * 3) The last unrestricted row which contains the marker.\r\n     *\r\n     * If the marker does not exist in any row, an invalid symbol will be\r\n     * returned. This indicates an internal solver error since the marker\r\n     * *should* exist somewhere in the tableau.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._getMarkerLeavingSymbol = function (marker) {\r\n        var dmax = Number.MAX_VALUE;\r\n        var r1 = dmax;\r\n        var r2 = dmax;\r\n        var invalid = INVALID_SYMBOL;\r\n        var first = invalid;\r\n        var second = invalid;\r\n        var third = invalid;\r\n        var rows = this._rowMap;\r\n        for (var i = 0, n = rows.size(); i < n; ++i) {\r\n            var pair = rows.itemAt(i);\r\n            var row = pair.second;\r\n            var c = row.coefficientFor(marker);\r\n            if (c === 0.0) {\r\n                continue;\r\n            }\r\n            var symbol = pair.first;\r\n            if (symbol.type() === SymbolType.External) {\r\n                third = symbol;\r\n            }\r\n            else if (c < 0.0) {\r\n                var r = -row.constant() / c;\r\n                if (r < r1) {\r\n                    r1 = r;\r\n                    first = symbol;\r\n                }\r\n            }\r\n            else {\r\n                var r = row.constant() / c;\r\n                if (r < r2) {\r\n                    r2 = r;\r\n                    second = symbol;\r\n                }\r\n            }\r\n        }\r\n        if (first !== invalid) {\r\n            return first;\r\n        }\r\n        if (second !== invalid) {\r\n            return second;\r\n        }\r\n        return third;\r\n    };\r\n    /**\r\n     * Remove the effects of a constraint on the objective function.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._removeConstraintEffects = function (cn, tag) {\r\n        if (tag.marker.type() === SymbolType.Error) {\r\n            this._removeMarkerEffects(tag.marker, cn.strength());\r\n        }\r\n        if (tag.other.type() === SymbolType.Error) {\r\n            this._removeMarkerEffects(tag.other, cn.strength());\r\n        }\r\n    };\r\n    /**\r\n     * Remove the effects of an error marker on the objective function.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._removeMarkerEffects = function (marker, strength) {\r\n        var pair = this._rowMap.find(marker);\r\n        if (pair !== undefined) {\r\n            this._objective.insertRow(pair.second, -strength);\r\n        }\r\n        else {\r\n            this._objective.insertSymbol(marker, -strength);\r\n        }\r\n    };\r\n    /**\r\n     * Get the first Slack or Error symbol in the row.\r\n     *\r\n     * If no such symbol is present, an invalid symbol will be returned.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._anyPivotableSymbol = function (row) {\r\n        var cells = row.cells();\r\n        for (var i = 0, n = cells.size(); i < n; ++i) {\r\n            var pair = cells.itemAt(i);\r\n            var type = pair.first.type();\r\n            if (type === SymbolType.Slack || type === SymbolType.Error) {\r\n                return pair.first;\r\n            }\r\n        }\r\n        return INVALID_SYMBOL;\r\n    };\r\n    /**\r\n     * Returns a new Symbol of the given type.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._makeSymbol = function (type) {\r\n        return new Symbol(type, this._idTick++);\r\n    };\r\n    return Solver;\r\n}());\r\nexports.Solver = Solver;\r\n/**\r\n * Test whether a value is approximately zero.\r\n * @private\r\n */\r\nfunction nearZero(value) {\r\n    var eps = 1.0e-8;\r\n    return value < 0.0 ? -value < eps : value < eps;\r\n}\r\n/**\r\n * An internal function for creating a constraint map.\r\n * @private\r\n */\r\nfunction createCnMap() {\r\n    return maptype_1.createMap();\r\n}\r\n/**\r\n * An internal function for creating a row map.\r\n * @private\r\n */\r\nfunction createRowMap() {\r\n    return maptype_1.createMap();\r\n}\r\n/**\r\n * An internal function for creating a variable map.\r\n * @private\r\n */\r\nfunction createVarMap() {\r\n    return maptype_1.createMap();\r\n}\r\n/**\r\n * An internal function for creating an edit map.\r\n * @private\r\n */\r\nfunction createEditMap() {\r\n    return maptype_1.createMap();\r\n}\r\n/**\r\n * An enum defining the available symbol types.\r\n * @private\r\n */\r\nvar SymbolType;\r\n(function (SymbolType) {\r\n    SymbolType[SymbolType[\"Invalid\"] = 0] = \"Invalid\";\r\n    SymbolType[SymbolType[\"External\"] = 1] = \"External\";\r\n    SymbolType[SymbolType[\"Slack\"] = 2] = \"Slack\";\r\n    SymbolType[SymbolType[\"Error\"] = 3] = \"Error\";\r\n    SymbolType[SymbolType[\"Dummy\"] = 4] = \"Dummy\";\r\n})(SymbolType || (SymbolType = {}));\r\n/**\r\n * An internal class representing a symbol in the solver.\r\n * @private\r\n */\r\nvar Symbol = /** @class */ (function () {\r\n    /**\r\n     * Construct a new Symbol\r\n     *\r\n     * @param [type] The type of the symbol.\r\n     * @param [id] The unique id number of the symbol.\r\n     */\r\n    function Symbol(type, id) {\r\n        this._id = id;\r\n        this._type = type;\r\n    }\r\n    /**\r\n     * Returns the unique id number of the symbol.\r\n     */\r\n    Symbol.prototype.id = function () {\r\n        return this._id;\r\n    };\r\n    /**\r\n     * Returns the type of the symbol.\r\n     */\r\n    Symbol.prototype.type = function () {\r\n        return this._type;\r\n    };\r\n    return Symbol;\r\n}());\r\n/**\r\n * A static invalid symbol\r\n * @private\r\n */\r\nvar INVALID_SYMBOL = new Symbol(SymbolType.Invalid, -1);\r\n/**\r\n * An internal row class used by the solver.\r\n * @private\r\n */\r\nvar Row = /** @class */ (function () {\r\n    /**\r\n     * Construct a new Row.\r\n     */\r\n    function Row(constant) {\r\n        if (constant === void 0) { constant = 0.0; }\r\n        this._cellMap = maptype_1.createMap();\r\n        this._constant = constant;\r\n    }\r\n    /**\r\n     * Returns the mapping of symbols to coefficients.\r\n     */\r\n    Row.prototype.cells = function () {\r\n        return this._cellMap;\r\n    };\r\n    /**\r\n     * Returns the constant for the row.\r\n     */\r\n    Row.prototype.constant = function () {\r\n        return this._constant;\r\n    };\r\n    /**\r\n     * Returns true if the row is a constant value.\r\n     */\r\n    Row.prototype.isConstant = function () {\r\n        return this._cellMap.empty();\r\n    };\r\n    /**\r\n     * Returns true if the Row has all dummy symbols.\r\n     */\r\n    Row.prototype.allDummies = function () {\r\n        var cells = this._cellMap;\r\n        for (var i = 0, n = cells.size(); i < n; ++i) {\r\n            var pair = cells.itemAt(i);\r\n            if (pair.first.type() !== SymbolType.Dummy) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Create a copy of the row.\r\n     */\r\n    Row.prototype.copy = function () {\r\n        var theCopy = new Row(this._constant);\r\n        theCopy._cellMap = this._cellMap.copy();\r\n        return theCopy;\r\n    };\r\n    /**\r\n     * Add a constant value to the row constant.\r\n     *\r\n     * Returns the new value of the constant.\r\n     */\r\n    Row.prototype.add = function (value) {\r\n        return (this._constant += value);\r\n    };\r\n    /**\r\n     * Insert the symbol into the row with the given coefficient.\r\n     *\r\n     * If the symbol already exists in the row, the coefficient\r\n     * will be added to the existing coefficient. If the resulting\r\n     * coefficient is zero, the symbol will be removed from the row.\r\n     */\r\n    Row.prototype.insertSymbol = function (symbol, coefficient) {\r\n        if (coefficient === void 0) { coefficient = 1.0; }\r\n        var pair = this._cellMap.setDefault(symbol, function () { return 0.0; });\r\n        if (nearZero((pair.second += coefficient))) {\r\n            this._cellMap.erase(symbol);\r\n        }\r\n    };\r\n    /**\r\n     * Insert a row into this row with a given coefficient.\r\n     *\r\n     * The constant and the cells of the other row will be\r\n     * multiplied by the coefficient and added to this row. Any\r\n     * cell with a resulting coefficient of zero will be removed\r\n     * from the row.\r\n     */\r\n    Row.prototype.insertRow = function (other, coefficient) {\r\n        if (coefficient === void 0) { coefficient = 1.0; }\r\n        this._constant += other._constant * coefficient;\r\n        var cells = other._cellMap;\r\n        for (var i = 0, n = cells.size(); i < n; ++i) {\r\n            var pair = cells.itemAt(i);\r\n            this.insertSymbol(pair.first, pair.second * coefficient);\r\n        }\r\n    };\r\n    /**\r\n     * Remove a symbol from the row.\r\n     */\r\n    Row.prototype.removeSymbol = function (symbol) {\r\n        this._cellMap.erase(symbol);\r\n    };\r\n    /**\r\n     * Reverse the sign of the constant and cells in the row.\r\n     */\r\n    Row.prototype.reverseSign = function () {\r\n        this._constant = -this._constant;\r\n        var cells = this._cellMap;\r\n        for (var i = 0, n = cells.size(); i < n; ++i) {\r\n            var pair = cells.itemAt(i);\r\n            pair.second = -pair.second;\r\n        }\r\n    };\r\n    /**\r\n     * Solve the row for the given symbol.\r\n     *\r\n     * This method assumes the row is of the form\r\n     * a * x + b * y + c = 0 and (assuming solve for x) will modify\r\n     * the row to represent the right hand side of\r\n     * x = -b/a * y - c / a. The target symbol will be removed from\r\n     * the row, and the constant and other cells will be multiplied\r\n     * by the negative inverse of the target coefficient.\r\n     *\r\n     * The given symbol *must* exist in the row.\r\n     */\r\n    Row.prototype.solveFor = function (symbol) {\r\n        var cells = this._cellMap;\r\n        var pair = cells.erase(symbol);\r\n        var coeff = -1.0 / pair.second;\r\n        this._constant *= coeff;\r\n        for (var i = 0, n = cells.size(); i < n; ++i) {\r\n            cells.itemAt(i).second *= coeff;\r\n        }\r\n    };\r\n    /**\r\n     * Solve the row for the given symbols.\r\n     *\r\n     * This method assumes the row is of the form\r\n     * x = b * y + c and will solve the row such that\r\n     * y = x / b - c / b. The rhs symbol will be removed from the\r\n     * row, the lhs added, and the result divided by the negative\r\n     * inverse of the rhs coefficient.\r\n     *\r\n     * The lhs symbol *must not* exist in the row, and the rhs\r\n     * symbol must* exist in the row.\r\n     */\r\n    Row.prototype.solveForEx = function (lhs, rhs) {\r\n        this.insertSymbol(lhs, -1.0);\r\n        this.solveFor(rhs);\r\n    };\r\n    /**\r\n     * Returns the coefficient for the given symbol.\r\n     */\r\n    Row.prototype.coefficientFor = function (symbol) {\r\n        var pair = this._cellMap.find(symbol);\r\n        return pair !== undefined ? pair.second : 0.0;\r\n    };\r\n    /**\r\n     * Substitute a symbol with the data from another row.\r\n     *\r\n     * Given a row of the form a * x + b and a substitution of the\r\n     * form x = 3 * y + c the row will be updated to reflect the\r\n     * expression 3 * a * y + a * c + b.\r\n     *\r\n     * If the symbol does not exist in the row, this is a no-op.\r\n     */\r\n    Row.prototype.substitute = function (symbol, row) {\r\n        var pair = this._cellMap.erase(symbol);\r\n        if (pair !== undefined) {\r\n            this.insertRow(row, pair.second);\r\n        }\r\n    };\r\n    return Row;\r\n}());\r\n//# sourceMappingURL=solver.js.map","import * as React from 'react';\r\n\r\ntype Props = {\r\n  child: React.ReactNode;\r\n  style: React.CSSProperties;\r\n};\r\n\r\nexport const SplitPane: React.FC<Props> = ({ style, child }) => {\r\n  return (\r\n    <div className={'split-pane'} style={style}>\r\n      {child}\r\n    </div>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { SplitOrientation } from './Split';\r\n\r\nconst { useEffect } = React;\r\n\r\ntype Props = {\r\n  orientation: SplitOrientation;\r\n  onMouseDown: (event: React.MouseEvent<HTMLDivElement>) => void;\r\n};\r\n\r\nexport const Resizer: React.FC<Props> = ({ orientation, onMouseDown }) => {\r\n  useEffect(() => {\r\n    return () => {};\r\n  }, []);\r\n\r\n  let resizerClassName = 'resizer';\r\n  const isHorizontal = orientation === SplitOrientation.Horizontal;\r\n  if (isHorizontal) {\r\n    resizerClassName += ' horizontal';\r\n  } else {\r\n    resizerClassName += ' vertical';\r\n  }\r\n\r\n  return <div className={resizerClassName} onMouseDown={onMouseDown} />;\r\n};\r\n"],"sourceRoot":""}