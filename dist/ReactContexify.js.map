{"version":3,"sources":["webpack://ReactContexify/webpack/universalModuleDefinition","webpack://ReactContexify/webpack/bootstrap","webpack://ReactContexify/./node_modules/@ishikawa_masashi/cassowary/lib/expression.js","webpack://ReactContexify/./src/components/Split.tsx","webpack://ReactContexify/external \"react\"","webpack://ReactContexify/./node_modules/@ishikawa_masashi/cassowary/lib/strength.js","webpack://ReactContexify/./node_modules/@ishikawa_masashi/cassowary/lib/constraint.js","webpack://ReactContexify/./node_modules/@ishikawa_masashi/cassowary/lib/maptype.js","webpack://ReactContexify/./node_modules/@ishikawa_masashi/cassowary/lib/variable.js","webpack://ReactContexify/./src/index.ts","webpack://ReactContexify/./src/utils/assert.ts","webpack://ReactContexify/./src/utils/layout.ts","webpack://ReactContexify/./src/utils/toCSSPx.ts","webpack://ReactContexify/./node_modules/@ishikawa_masashi/cassowary/lib/index.js","webpack://ReactContexify/./node_modules/@ishikawa_masashi/cassowary/lib/solver.js","webpack://ReactContexify/./src/components/SplitPane.tsx","webpack://ReactContexify/./src/components/Resizer.tsx"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__2__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","maptype_1","variable_1","Expression","parsed","parseArgs","arguments","this","_terms","terms","_constant","constant","result","size","pair","itemAt","first","second","plus","minus","multiply","coefficient","divide","isConstant","toString","array","map","join","args","createMap","length","item","Variable","setDefault","j","k","terms2","termPair","Array","Error","value2","SplitOrientation","React","__importStar","assert_1","__importDefault","layout_1","toCSSPx_1","cassowary_1","SplitPane_1","Resizer_1","useState","useEffect","useRef","Split","props","setState","containerRef","indexRef","solverRef","varsRef","splitsRef","forceUpdate","document","addEventListener","onResizerMouseMove","onResizerMouseUp","newSplits","canonicalizeSplits","setupSolver","getContainerSize","orientation","querySolver","current","onChange","removeEventListener","splits","default","documentElement","style","pointerEvents","slice","e","vars","isVertical","Vertical","rect","getBoundingClientRect","mouseOffset","clientX","left","clientY","top","index","solver","suggestValue","updateVariables","preventDefault","container","Horizontal","clientHeight","clientWidth","count","Children","children","containerSize","info","assign","defaultSplit","push","min","max","Solver","addEditVariable","Strength","strong","cn","Constraint","Operator","Eq","addConstraint","_a","right","Ge","Le","weak","suggestVarValues","x","y","isHorizontal","forEach","child","flexBasis","Math","round","flex","createElement","SplitPane","Resizer","onMouseDown","ev","varilable","removeEditVariable","medium","onResizerMouseDown","className","ref","flexDirection","a","b","w","clip","required","expression_1","strength_1","expression","operator","rhs","strength","_id","CnId","_operator","_strength","undefined","_expression","id","op","IndexedMap","empty","contains","find","Pair","insert","erase","last","pop","copy","_value","_context","VarId","_name","setName","context","setContext","setValue","toJSON","Split_1","Split_2","message","layoutThrottleDuration","layoutTimeout","clearTimeout","setTimeout","dispatchEvent","Event","__export","SymbolType","constraint_1","_cnMap","_rowMap","_varMap","_editMap","_infeasibleRows","_objective","Row","_artificial","_idTick","createConstraint","lhs","constraint","data","_createRow","row","tag","subject","_chooseSubject","type","Invalid","allDummies","nearZero","marker","_addWithArtificialVariable","solveFor","_substitute","_optimize","removeConstraint","cnPair","_removeConstraintEffects","rowPair","leaving","_getMarkerLeavingSymbol","solveForEx","hasConstraint","variable","expr","editPair","hasEditVariable","rows","delta","add","_dualOptimize","other","rowPair_1","coeff","coefficientFor","External","_getVarSymbol","_this","_makeSymbol","symbol","basicPair","insertRow","insertSymbol","objective","INVALID_SYMBOL","slack","Slack","error","errplus","errminus","dummy","Dummy","reverseSign","cells","art","success","basicRow","entering","_anyPivotableSymbol","removeSymbol","substitute","_getEnteringSymbol","_getLeavingSymbol","infeasible","_getDualEnteringSymbol","ratio","Number","MAX_VALUE","found","temp","temp_ratio","dmax","r1","r2","invalid","third","_removeMarkerEffects","_type","_cellMap","theCopy","resizerClassName"],"mappings":"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","file":"ReactContexify.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReactContexify\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"ReactContexify\"] = factory(root[\"react\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__2__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014, Nucleic Development Team.\r\n|\r\n| Distributed under the terms of the Modified BSD License.\r\n|\r\n| The full license is in the file COPYING.txt, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar maptype_1 = require(\"./maptype\");\r\nvar variable_1 = require(\"./variable\");\r\n/**\r\n * An expression of variable terms and a constant.\r\n *\r\n * The constructor accepts an arbitrary number of parameters,\r\n * each of which must be one of the following types:\r\n *  - number\r\n *  - Variable\r\n *  - Expression\r\n *  - 2-tuple of [number, Variable|Expression]\r\n *\r\n * The parameters are summed. The tuples are multiplied.\r\n *\r\n * @class\r\n * @param {...(number|Variable|Expression|Array)} args\r\n */\r\nvar Expression = /** @class */ (function () {\r\n    function Expression() {\r\n        var parsed = parseArgs(arguments);\r\n        this._terms = parsed.terms;\r\n        this._constant = parsed.constant;\r\n    }\r\n    /**\r\n     * Returns the mapping of terms in the expression.\r\n     *\r\n     * This *must* be treated as const.\r\n     * @private\r\n     */\r\n    Expression.prototype.terms = function () {\r\n        return this._terms;\r\n    };\r\n    /**\r\n     * Returns the constant of the expression.\r\n     * @private\r\n     */\r\n    Expression.prototype.constant = function () {\r\n        return this._constant;\r\n    };\r\n    /**\r\n     * Returns the computed value of the expression.\r\n     *\r\n     * @private\r\n     * @return {Number} computed value of the expression\r\n     */\r\n    Expression.prototype.value = function () {\r\n        var result = this._constant;\r\n        for (var i = 0, n = this._terms.size(); i < n; i++) {\r\n            var pair = this._terms.itemAt(i);\r\n            result += pair.first.value() * pair.second;\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Creates a new Expression by adding a number, variable or expression\r\n     * to the expression.\r\n     *\r\n     * @param {Number|Variable|Expression} value Value to add.\r\n     * @return {Expression} expression\r\n     */\r\n    Expression.prototype.plus = function (value) {\r\n        return new Expression(this, value);\r\n    };\r\n    /**\r\n     * Creates a new Expression by substracting a number, variable or expression\r\n     * from the expression.\r\n     *\r\n     * @param {Number|Variable|Expression} value Value to substract.\r\n     * @return {Expression} expression\r\n     */\r\n    Expression.prototype.minus = function (value) {\r\n        return new Expression(this, typeof value === 'number' ? -value : [-1, value]);\r\n    };\r\n    /**\r\n     * Creates a new Expression by multiplying with a fixed number.\r\n     *\r\n     * @param {Number} coefficient Coefficient to multiply with.\r\n     * @return {Expression} expression\r\n     */\r\n    Expression.prototype.multiply = function (coefficient) {\r\n        return new Expression([coefficient, this]);\r\n    };\r\n    /**\r\n     * Creates a new Expression by dividing with a fixed number.\r\n     *\r\n     * @param {Number} coefficient Coefficient to divide by.\r\n     * @return {Expression} expression\r\n     */\r\n    Expression.prototype.divide = function (coefficient) {\r\n        return new Expression([1 / coefficient, this]);\r\n    };\r\n    Expression.prototype.isConstant = function () {\r\n        return this._terms.size() == 0;\r\n    };\r\n    Expression.prototype.toString = function () {\r\n        var result = this._terms.array\r\n            .map(function (pair) {\r\n            return pair.second + '*' + pair.first.toString();\r\n        })\r\n            .join(' + ');\r\n        if (!this.isConstant() && this._constant !== 0) {\r\n            result += ' + ';\r\n        }\r\n        result += this._constant;\r\n        return result;\r\n    };\r\n    return Expression;\r\n}());\r\nexports.Expression = Expression;\r\n/**\r\n * An internal argument parsing function.\r\n * @private\r\n */\r\nfunction parseArgs(args) {\r\n    var constant = 0.0;\r\n    var factory = function () { return 0.0; };\r\n    var terms = maptype_1.createMap();\r\n    for (var i = 0, n = args.length; i < n; ++i) {\r\n        var item = args[i];\r\n        if (typeof item === 'number') {\r\n            constant += item;\r\n        }\r\n        else if (item instanceof variable_1.Variable) {\r\n            terms.setDefault(item, factory).second += 1.0;\r\n        }\r\n        else if (item instanceof Expression) {\r\n            constant += item.constant();\r\n            var terms2 = item.terms();\r\n            for (var j = 0, k = terms2.size(); j < k; j++) {\r\n                var termPair = terms2.itemAt(j);\r\n                terms.setDefault(termPair.first, factory).second += termPair.second;\r\n            }\r\n        }\r\n        else if (item instanceof Array) {\r\n            if (item.length !== 2) {\r\n                throw new Error('array must have length 2');\r\n            }\r\n            var value = item[0];\r\n            var value2 = item[1];\r\n            if (typeof value !== 'number') {\r\n                throw new Error('array item 0 must be a number');\r\n            }\r\n            if (value2 instanceof variable_1.Variable) {\r\n                terms.setDefault(value2, factory).second += value;\r\n            }\r\n            else if (value2 instanceof Expression) {\r\n                constant += value2.constant() * value;\r\n                var terms2 = value2.terms();\r\n                for (var j = 0, k = terms2.size(); j < k; j++) {\r\n                    var termPair = terms2.itemAt(j);\r\n                    terms.setDefault(termPair.first, factory).second +=\r\n                        termPair.second * value;\r\n                }\r\n            }\r\n            else {\r\n                throw new Error('array item 1 must be a variable or expression');\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('invalid Expression argument: ' + item);\r\n        }\r\n    }\r\n    return { terms: terms, constant: constant };\r\n}\r\n//# sourceMappingURL=expression.js.map","import * as React from 'react';\r\nimport { MouseEvent } from 'react';\r\n// import { EventDispatcher } from \"../../models\";\r\n// import { assert, layout } from \"../utils/util\";\r\n\r\nimport assert from '../utils/assert';\r\nimport layout from '../utils/layout';\r\n\r\nimport toCSSPx from '../utils/toCSSPx';\r\nimport {\r\n  Solver,\r\n  Variable,\r\n  Strength,\r\n  Constraint,\r\n  Operator\r\n} from '@ishikawa_masashi/cassowary';\r\nimport { SplitPane } from './SplitPane';\r\nimport { Resizer } from './Resizer';\r\n\r\nconst { useState, useEffect, useRef } = React;\r\nexport enum SplitOrientation {\r\n  Horizontal,\r\n  Vertical\r\n}\r\n\r\nexport interface SplitInfo {\r\n  min?: number;\r\n  max?: number;\r\n  value?: number;\r\n  resize?: 'fixed' | 'stretch';\r\n}\r\n\r\ntype Props = {\r\n  orientation: SplitOrientation;\r\n  onChange?: (splits: SplitInfo[]) => void;\r\n  splits?: SplitInfo[];\r\n  defaultSplit?: SplitInfo;\r\n  children: React.ReactNode;\r\n  name?: string; // TODO: Remove, for debugging.\r\n};\r\n\r\n// type State = {\r\n//   splits: SplitInfo[];\r\n// };\r\n\r\n// const onResizeBegin = new EventDispatcher(\"Resize Begin\");\r\n// const onResizeEnd = new EventDispatcher(\"Resize End\");\r\nexport const Split: React.FC<Props> = props => {\r\n  let containerRef = useRef<HTMLDivElement>(null);\r\n  let indexRef = useRef(-1);\r\n  let solverRef = useRef<Solver>();\r\n  let varsRef = useRef<Variable[]>();\r\n  let splitsRef = useRef<SplitInfo[]>([]);\r\n\r\n  const useForceUpdate = () => {\r\n    const [, setState] = useState();\r\n    return () => setState({});\r\n  };\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousemove', onResizerMouseMove as any);\r\n    document.addEventListener('mouseup', onResizerMouseUp);\r\n    const newSplits = canonicalizeSplits(props);\r\n    setupSolver(newSplits, getContainerSize(props.orientation));\r\n    querySolver(newSplits);\r\n    splitsRef.current = newSplits;\r\n    // forceUpdate();\r\n    props.onChange && props.onChange(newSplits);\r\n\r\n    return () => {\r\n      document.removeEventListener('mousemove', onResizerMouseMove as any);\r\n      document.removeEventListener('mouseup', onResizerMouseUp);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    onResizerMouseUp();\r\n    const splits = canonicalizeSplits(props);\r\n    setupSolver(splits, getContainerSize(props.orientation));\r\n    querySolver(splits);\r\n    splitsRef.current = splits;\r\n    forceUpdate();\r\n    layout();\r\n  }, [props]);\r\n\r\n  const onResizerMouseDown = (i: number) => {\r\n    indexRef.current = i;\r\n    const index = indexRef.current;\r\n    const vars = varsRef.current!;\r\n    const solver = solverRef.current!;\r\n    const varilable = vars[index + 1];\r\n    solver.removeEditVariable(varilable);\r\n    solver.addEditVariable(varilable, Strength.medium);\r\n    // Split.onResizeBegin.dispatch(this);\r\n    window.document.documentElement.style.pointerEvents = 'none';\r\n  };\r\n\r\n  /**\r\n   * This fires for all splits, even if the resizer doesn't belong to this split.\r\n   */\r\n  const onResizerMouseUp = () => {\r\n    if (indexRef.current < 0) {\r\n      return;\r\n    }\r\n    indexRef.current = -1;\r\n    // Split.onResizeEnd.dispatch(this);\r\n    window.document.documentElement.style.pointerEvents = 'auto';\r\n    const newSplits = splitsRef.current.slice();\r\n    querySolver(newSplits);\r\n    return props.onChange && props.onChange(newSplits);\r\n  };\r\n\r\n  const onResizerMouseMove = (e: MouseEvent<any>) => {\r\n    if (indexRef.current < 0) {\r\n      return;\r\n    }\r\n    const vars = varsRef.current!;\r\n    const isVertical = props.orientation === SplitOrientation.Vertical;\r\n    const container = containerRef.current!;\r\n    const rect = container.getBoundingClientRect();\r\n    const mouseOffset = isVertical\r\n      ? e.clientX - rect.left\r\n      : e.clientY - rect.top;\r\n\r\n    const index = indexRef.current;\r\n    const solver = solverRef.current!;\r\n    solver.suggestValue(vars[index + 1], mouseOffset);\r\n    // this.solver.resolve();\r\n    solver.updateVariables();\r\n    const newSplits = splitsRef.current.slice();\r\n    querySolver(newSplits);\r\n    forceUpdate();\r\n    e.preventDefault();\r\n  };\r\n\r\n  const querySolver = (splits: SplitInfo[]) => {\r\n    const vars = varsRef.current!;\r\n    for (let i = 0; i < splits.length; i++) {\r\n      splits[i].value = vars[i + 1].value() - vars[i].value();\r\n    }\r\n  };\r\n\r\n  const getContainerSize = (orientation: SplitOrientation): number => {\r\n    const container = containerRef.current!;\r\n    return orientation === SplitOrientation.Horizontal\r\n      ? container.clientHeight\r\n      : container.clientWidth;\r\n  };\r\n\r\n  const canonicalizeSplits = (props: Props): SplitInfo[] => {\r\n    const count = React.Children.count(props.children);\r\n    const containerSize = getContainerSize(props.orientation);\r\n    const result = [];\r\n    for (let i = 0; i < count; i++) {\r\n      let info = {};\r\n      if (props.splits && i < props.splits.length) {\r\n        info = Object.assign(info, props.splits[i]);\r\n      }\r\n      if (props.defaultSplit) {\r\n        info = Object.assign(props.defaultSplit, info);\r\n      }\r\n\r\n      result.push(\r\n        Object.assign(\r\n          {\r\n            min: 32,\r\n            max: containerSize\r\n          },\r\n          info\r\n        )\r\n      );\r\n    }\r\n    return result;\r\n  };\r\n\r\n  /**\r\n   * Initializes a Cassowary solver and the constraints based on split infos and container size.\r\n   */\r\n  const setupSolver = (splits: SplitInfo[], containerSize: number) => {\r\n    assert(indexRef.current < 0, 'Should not be in a dragging state.');\r\n    //const weak = Cassowary.Strength.weak;\r\n    //// const medium = Cassowary.Strength.medium;\r\n    //const strong = Cassowary.Strength.strong;\r\n    //const required = Cassowary.Strength.required;\r\n\r\n    ////function eq(a1: any, a2: any, strength: number, weight?: number) {\r\n    ////    return new Cassowary.Equation(a1, a2, strength || weak, weight || 0);\r\n    ////}\r\n\r\n    //function geq(a1: any, a2: any, strength: any, weight?: number) {\r\n    //  return new Cassowary.Inequality(a1, Cassowary.GEQ, a2, strength, weight);\r\n    //}\r\n\r\n    //function leq(a1: any, a2: any, strength: any, weight?: number) {\r\n    //  return new Cassowary.Inequality(a1, Cassowary.LEQ, a2, strength, weight);\r\n    //}\r\n\r\n    // f     1               2           3   ...    l\r\n    // |-----|---------------|-----------|----------|\r\n\r\n    // const vars: CassowaryVar[] = this.vars = [new Cassowary.Variable()];\r\n    varsRef.current = [new Variable()];\r\n    const vars = varsRef.current;\r\n    solverRef.current = new Solver();\r\n    const solver = solverRef.current;\r\n\r\n    // Create Cassowary variables, these the dragged position as an offset from the origin.\r\n    for (let i = 0; i < splits.length; i++) {\r\n      vars.push(new Variable());\r\n    }\r\n\r\n    solver.addEditVariable(vars[0], Strength.strong);\r\n    solver.suggestValue(vars[0], 0);\r\n\r\n    let cn = new Constraint(vars[0], Operator.Eq, 0);\r\n    solver.addConstraint(cn);\r\n\r\n    solver.addEditVariable(vars[vars.length - 1], Strength.strong);\r\n    solver.suggestValue(vars[vars.length - 1], containerSize);\r\n\r\n    cn = new Constraint(vars[vars.length - 1], Operator.Eq, containerSize);\r\n    solver.addConstraint(cn);\r\n\r\n    for (let i = 0; i < vars.length - 1; i++) {\r\n      const { min, max } = splits[i];\r\n      const left = vars[i];\r\n      const right = vars[i + 1];\r\n      solver.addConstraint(\r\n        new Constraint(right.minus(left), Operator.Ge, min, Strength.strong)\r\n      );\r\n      solver.addConstraint(\r\n        new Constraint(right.minus(left), Operator.Le, max, Strength.strong)\r\n      );\r\n    }\r\n\r\n    // Add stays for the variables representing the dragged panes. This causes them to\r\n    // try and remain in their dragged position unless the constraints prevent that.\r\n    for (let i = 1; i < vars.length - 1; i++) {\r\n      // solver.addStay(vars[i], weak);\r\n      solver.addEditVariable(vars[i], Strength.weak);\r\n      solver.suggestValue(vars[i], 10000);\r\n    }\r\n\r\n    suggestVarValues(splits);\r\n  };\r\n\r\n  const suggestVarValues = (splits: SplitInfo[]) => {\r\n    const vars = varsRef.current!;\r\n    const solver = solverRef.current!;\r\n    for (let i = 0; i < vars.length - 1; i++) {\r\n      const x = vars[i];\r\n      const y = vars[i + 1];\r\n\r\n      if (splits[i].value) {\r\n        if (i < vars.length - 2) {\r\n          solver.suggestValue(y, x.value() + splits[i].value!);\r\n        } else {\r\n          solver.suggestValue(x, y.value() - splits[i].value!);\r\n        }\r\n        solver.updateVariables();\r\n      }\r\n    }\r\n  };\r\n  const isHorizontal = props.orientation === SplitOrientation.Horizontal;\r\n  const count = React.Children.count(props.children);\r\n  const children: React.ReactNode[] = [];\r\n  React.Children.forEach(props.children, (child, i) => {\r\n    const style: React.CSSProperties = {};\r\n    if (i < count - 1 && i < splitsRef.current.length) {\r\n      style.flexBasis = toCSSPx(\r\n        Math.round(splitsRef.current[i].value as number)\r\n      );\r\n    } else {\r\n      style.flex = 1;\r\n    }\r\n\r\n    children.push(<SplitPane key={i} style={style} child={child} />);\r\n    if (i < count - 1) {\r\n      children.push(\r\n        <Resizer\r\n          key={`Resizer-${i}`}\r\n          orientation={props.orientation}\r\n          onMouseDown={ev => onResizerMouseDown(i)}\r\n        />\r\n      );\r\n    }\r\n  });\r\n  return (\r\n    <div\r\n      className=\"split\"\r\n      ref={containerRef}\r\n      style={{ flexDirection: isHorizontal ? 'column' : 'row' }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014, Nucleic Development Team.\r\n|\r\n| Distributed under the terms of the Modified BSD License.\r\n|\r\n| The full license is in the file COPYING.txt, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * @class Strength\r\n */\r\nvar Strength = /** @class */ (function () {\r\n    function Strength() {\r\n    }\r\n    /**\r\n     * Create a new symbolic strength.\r\n     *\r\n     * @param a strong\r\n     * @param b medium\r\n     * @param c weak\r\n     * @param [w] weight\r\n     * @return strength\r\n     */\r\n    Strength.create = function (a, b, c, w) {\r\n        if (w === void 0) { w = 1.0; }\r\n        var result = 0.0;\r\n        result += Math.max(0.0, Math.min(1000.0, a * w)) * 1000000.0;\r\n        result += Math.max(0.0, Math.min(1000.0, b * w)) * 1000.0;\r\n        result += Math.max(0.0, Math.min(1000.0, c * w));\r\n        return result;\r\n    };\r\n    /**\r\n     * Clip a symbolic strength to the allowed min and max.\r\n     * @private\r\n     */\r\n    Strength.clip = function (value) {\r\n        return Math.max(0.0, Math.min(Strength.required, value));\r\n    };\r\n    /**\r\n     * The 'required' symbolic strength.\r\n     */\r\n    Strength.required = Strength.create(1000.0, 1000.0, 1000.0);\r\n    /**\r\n     * The 'strong' symbolic strength.\r\n     */\r\n    Strength.strong = Strength.create(1.0, 0.0, 0.0);\r\n    /**\r\n     * The 'medium' symbolic strength.\r\n     */\r\n    Strength.medium = Strength.create(0.0, 1.0, 0.0);\r\n    /**\r\n     * The 'weak' symbolic strength.\r\n     */\r\n    Strength.weak = Strength.create(0.0, 0.0, 1.0);\r\n    return Strength;\r\n}());\r\nexports.Strength = Strength;\r\n//# sourceMappingURL=strength.js.map","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014, Nucleic Development Team.\r\n|\r\n| Distributed under the terms of the Modified BSD License.\r\n|\r\n| The full license is in the file COPYING.txt, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar expression_1 = require(\"./expression\");\r\nvar strength_1 = require(\"./strength\");\r\n/**\r\n * An enum defining the linear constraint operators.\r\n *\r\n * |Value|Operator|Description|\r\n * |----|-----|-----|\r\n * |`Le`|<=|Less than equal|\r\n * |`Ge`|>=|Greater than equal|\r\n * |`Eq`|==|Equal|\r\n *\r\n * @enum {Number}\r\n */\r\nvar Operator;\r\n(function (Operator) {\r\n    Operator[Operator[\"Le\"] = 0] = \"Le\";\r\n    Operator[Operator[\"Ge\"] = 1] = \"Ge\";\r\n    Operator[Operator[\"Eq\"] = 2] = \"Eq\"; // ==\r\n})(Operator = exports.Operator || (exports.Operator = {}));\r\n/**\r\n * A linear constraint equation.\r\n *\r\n * A constraint equation is composed of an expression, an operator,\r\n * and a strength. The RHS of the equation is implicitly zero.\r\n *\r\n * @class\r\n * @param {Expression} expression The constraint expression (LHS).\r\n * @param {Operator} operator The equation operator.\r\n * @param {Expression} [rhs] Right hand side of the expression.\r\n * @param {Number} [strength=Strength.required] The strength of the constraint.\r\n */\r\nvar Constraint = /** @class */ (function () {\r\n    function Constraint(expression, operator, rhs, strength) {\r\n        if (strength === void 0) { strength = strength_1.Strength.required; }\r\n        this._id = CnId++;\r\n        this._operator = operator;\r\n        this._strength = strength_1.Strength.clip(strength);\r\n        if (rhs === undefined && expression instanceof expression_1.Expression) {\r\n            this._expression = expression;\r\n        }\r\n        else {\r\n            this._expression = expression.minus(rhs);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the unique id number of the constraint.\r\n     * @private\r\n     */\r\n    Constraint.prototype.id = function () {\r\n        return this._id;\r\n    };\r\n    /**\r\n     * Returns the expression of the constraint.\r\n     *\r\n     * @return {Expression} expression\r\n     */\r\n    Constraint.prototype.expression = function () {\r\n        return this._expression;\r\n    };\r\n    /**\r\n     * Returns the relational operator of the constraint.\r\n     *\r\n     * @return {Operator} linear constraint operator\r\n     */\r\n    Constraint.prototype.op = function () {\r\n        return this._operator;\r\n    };\r\n    /**\r\n     * Returns the strength of the constraint.\r\n     *\r\n     * @return {Number} strength\r\n     */\r\n    Constraint.prototype.strength = function () {\r\n        return this._strength;\r\n    };\r\n    Constraint.prototype.toString = function () {\r\n        return (this._expression.toString() +\r\n            ' ' +\r\n            ['<=', '>=', '='][this._operator] +\r\n            ' 0 (' +\r\n            this._strength.toString() +\r\n            ')');\r\n    };\r\n    return Constraint;\r\n}());\r\nexports.Constraint = Constraint;\r\n/**\r\n * The internal constraint id counter.\r\n * @private\r\n */\r\nvar CnId = 0;\r\n//# sourceMappingURL=constraint.js.map","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014, Nucleic Development Team.\r\n|\r\n| Distributed under the terms of the Modified BSD License.\r\n|\r\n| The full license is in the file COPYING.txt, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction createMap() {\r\n    return new IndexedMap();\r\n}\r\nexports.createMap = createMap;\r\nvar IndexedMap = /** @class */ (function () {\r\n    function IndexedMap() {\r\n        this.index = {};\r\n        this.array = [];\r\n    }\r\n    /**\r\n     * Returns the number of items in the array.\r\n     */\r\n    IndexedMap.prototype.size = function () {\r\n        return this.array.length;\r\n    };\r\n    /**\r\n     * Returns true if the array is empty.\r\n     */\r\n    IndexedMap.prototype.empty = function () {\r\n        return this.array.length === 0;\r\n    };\r\n    /**\r\n     * Returns the item at the given array index.\r\n     *\r\n     * @param index The integer index of the desired item.\r\n     */\r\n    IndexedMap.prototype.itemAt = function (index) {\r\n        return this.array[index];\r\n    };\r\n    /**\r\n     * Returns true if the key is in the array, false otherwise.\r\n     *\r\n     * @param key The key to locate in the array.\r\n     */\r\n    IndexedMap.prototype.contains = function (key) {\r\n        return this.index[key.id()] !== undefined;\r\n    };\r\n    /**\r\n     * Returns the pair associated with the given key, or undefined.\r\n     *\r\n     * @param key The key to locate in the array.\r\n     */\r\n    IndexedMap.prototype.find = function (key) {\r\n        var i = this.index[key.id()];\r\n        return i === undefined ? undefined : this.array[i];\r\n    };\r\n    /**\r\n     * Returns the pair associated with the key if it exists.\r\n     *\r\n     * If the key does not exist, a new pair will be created and\r\n     * inserted using the value created by the given factory.\r\n     *\r\n     * @param key The key to locate in the array.\r\n     * @param factory The function which creates the default value.\r\n     */\r\n    IndexedMap.prototype.setDefault = function (key, factory) {\r\n        var i = this.index[key.id()];\r\n        if (i === undefined) {\r\n            var pair = new Pair(key, factory());\r\n            this.index[key.id()] = this.array.length;\r\n            this.array.push(pair);\r\n            return pair;\r\n        }\r\n        else {\r\n            return this.array[i];\r\n        }\r\n    };\r\n    /**\r\n     * Insert the pair into the array and return the pair.\r\n     *\r\n     * This will overwrite any existing entry in the array.\r\n     *\r\n     * @param key The key portion of the pair.\r\n     * @param value The value portion of the pair.\r\n     */\r\n    IndexedMap.prototype.insert = function (key, value) {\r\n        var pair = new Pair(key, value);\r\n        var i = this.index[key.id()];\r\n        if (i === undefined) {\r\n            this.index[key.id()] = this.array.length;\r\n            this.array.push(pair);\r\n        }\r\n        else {\r\n            this.array[i] = pair;\r\n        }\r\n        return pair;\r\n    };\r\n    /**\r\n     * Removes and returns the pair for the given key, or undefined.\r\n     *\r\n     * @param key The key to remove from the map.\r\n     */\r\n    IndexedMap.prototype.erase = function (key) {\r\n        var i = this.index[key.id()];\r\n        if (i === undefined) {\r\n            return undefined;\r\n        }\r\n        this.index[key.id()] = undefined;\r\n        var pair = this.array[i];\r\n        var last = this.array.pop();\r\n        if (pair !== last) {\r\n            this.array[i] = last;\r\n            this.index[last.first.id()] = i;\r\n        }\r\n        return pair;\r\n    };\r\n    /**\r\n     * Create a copy of this associative array.\r\n     */\r\n    IndexedMap.prototype.copy = function () {\r\n        var copy = new IndexedMap();\r\n        for (var i = 0; i < this.array.length; i++) {\r\n            var pair = this.array[i].copy();\r\n            copy.array[i] = pair;\r\n            copy.index[pair.first.id()] = i;\r\n        }\r\n        return copy;\r\n    };\r\n    return IndexedMap;\r\n}());\r\n/**\r\n * A class which defines a generic pair object.\r\n * @private\r\n */\r\n// tslint:disable: max-classes-per-file\r\nvar Pair = /** @class */ (function () {\r\n    /**\r\n     * Construct a new Pair object.\r\n     *\r\n     * @param first The first item of the pair.\r\n     * @param second The second item of the pair.\r\n     */\r\n    function Pair(first, second) {\r\n        this.first = first;\r\n        this.second = second;\r\n    }\r\n    /**\r\n     * Create a copy of the pair.\r\n     */\r\n    Pair.prototype.copy = function () {\r\n        return new Pair(this.first, this.second);\r\n    };\r\n    return Pair;\r\n}());\r\n//# sourceMappingURL=maptype.js.map","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014, Nucleic Development Team.\r\n|\r\n| Distributed under the terms of the Modified BSD License.\r\n|\r\n| The full license is in the file COPYING.txt, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar expression_1 = require(\"./expression\");\r\n/**\r\n * The primary user constraint variable.\r\n *\r\n * @class\r\n * @param {String} [name=\"\"] The name to associated with the variable.\r\n */\r\nvar Variable = /** @class */ (function () {\r\n    function Variable(name) {\r\n        if (name === void 0) { name = ''; }\r\n        this._value = 0.0;\r\n        this._context = null;\r\n        this._id = VarId++;\r\n        this._name = name;\r\n    }\r\n    /**\r\n     * Returns the unique id number of the variable.\r\n     * @private\r\n     */\r\n    Variable.prototype.id = function () {\r\n        return this._id;\r\n    };\r\n    /**\r\n     * Returns the name of the variable.\r\n     *\r\n     * @return {String} name of the variable\r\n     */\r\n    Variable.prototype.name = function () {\r\n        return this._name;\r\n    };\r\n    /**\r\n     * Set the name of the variable.\r\n     *\r\n     * @param {String} name Name of the variable\r\n     */\r\n    Variable.prototype.setName = function (name) {\r\n        this._name = name;\r\n    };\r\n    /**\r\n     * Returns the user context object of the variable.\r\n     * @private\r\n     */\r\n    Variable.prototype.context = function () {\r\n        return this._context;\r\n    };\r\n    /**\r\n     * Set the user context object of the variable.\r\n     * @private\r\n     */\r\n    Variable.prototype.setContext = function (context) {\r\n        this._context = context;\r\n    };\r\n    /**\r\n     * Returns the value of the variable.\r\n     *\r\n     * @return {Number} Calculated value\r\n     */\r\n    Variable.prototype.value = function () {\r\n        return this._value;\r\n    };\r\n    /**\r\n     * Set the value of the variable.\r\n     * @private\r\n     */\r\n    Variable.prototype.setValue = function (value) {\r\n        this._value = value;\r\n    };\r\n    /**\r\n     * Creates a new Expression by adding a number, variable or expression\r\n     * to the variable.\r\n     *\r\n     * @param {Number|Variable|Expression} value Value to add.\r\n     * @return {Expression} expression\r\n     */\r\n    Variable.prototype.plus = function (value) {\r\n        return new expression_1.Expression(this, value);\r\n    };\r\n    /**\r\n     * Creates a new Expression by substracting a number, variable or expression\r\n     * from the variable.\r\n     *\r\n     * @param {Number|Variable|Expression} value Value to substract.\r\n     * @return {Expression} expression\r\n     */\r\n    Variable.prototype.minus = function (value) {\r\n        return new expression_1.Expression(this, typeof value === 'number' ? -value : [-1, value]);\r\n    };\r\n    /**\r\n     * Creates a new Expression by multiplying with a fixed number.\r\n     *\r\n     * @param {Number} coefficient Coefficient to multiply with.\r\n     * @return {Expression} expression\r\n     */\r\n    Variable.prototype.multiply = function (coefficient) {\r\n        return new expression_1.Expression([coefficient, this]);\r\n    };\r\n    /**\r\n     * Creates a new Expression by dividing with a fixed number.\r\n     *\r\n     * @param {Number} coefficient Coefficient to divide by.\r\n     * @return {Expression} expression\r\n     */\r\n    Variable.prototype.divide = function (coefficient) {\r\n        return new expression_1.Expression([1 / coefficient, this]);\r\n    };\r\n    /**\r\n     * Returns the JSON representation of the variable.\r\n     * @private\r\n     */\r\n    Variable.prototype.toJSON = function () {\r\n        return {\r\n            name: this._name,\r\n            value: this._value\r\n        };\r\n    };\r\n    Variable.prototype.toString = function () {\r\n        return this._context + '[' + this._name + ':' + this._value + ']';\r\n    };\r\n    return Variable;\r\n}());\r\nexports.Variable = Variable;\r\n/**\r\n * The internal variable id counter.\r\n * @private\r\n */\r\nvar VarId = 0;\r\n//# sourceMappingURL=variable.js.map","export { Split } from './components/Split';\nexport { SplitOrientation } from './components/Split';\nexport { SplitInfo } from './components/Split';\n","export default function assert(c: any, message?: string) {\r\n  if (!c) {\r\n    throw new Error(message);\r\n  }\r\n}\r\n","const layoutThrottleDuration = 10;\r\nlet layoutTimeout = 0;\r\n\r\nexport default function layout() {\r\n  if (layoutTimeout) {\r\n    window.clearTimeout(layoutTimeout);\r\n  }\r\n  window.setTimeout(() => {\r\n    layoutTimeout = 0;\r\n    document.dispatchEvent(new Event('layout'));\r\n  }, layoutThrottleDuration);\r\n}\r\n","export default function toCSSPx(x: number) {\r\n  return (x | 0) + 'px';\r\n}\r\n","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2018, Nucleic Development Team & H. Rutjes.\r\n|\r\n| Distributed under the terms of the Modified BSD License.\r\n|\r\n| The full license is in the file COPYING.txt, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./constraint\"));\r\n__export(require(\"./expression\"));\r\n__export(require(\"./solver\"));\r\n__export(require(\"./strength\"));\r\n__export(require(\"./variable\"));\r\n//# sourceMappingURL=index.js.map","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014, Nucleic Development Team.\r\n|\r\n| Distributed under the terms of the Modified BSD License.\r\n|\r\n| The full license is in the file COPYING.txt, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar constraint_1 = require(\"./constraint\");\r\nvar expression_1 = require(\"./expression\");\r\nvar maptype_1 = require(\"./maptype\");\r\nvar strength_1 = require(\"./strength\");\r\n/**\r\n * The constraint solver class.\r\n *\r\n * @class\r\n */\r\nvar Solver = /** @class */ (function () {\r\n    /**\r\n     * Construct a new Solver.\r\n     */\r\n    function Solver() {\r\n        this._cnMap = createCnMap();\r\n        this._rowMap = createRowMap();\r\n        this._varMap = createVarMap();\r\n        this._editMap = createEditMap();\r\n        this._infeasibleRows = [];\r\n        this._objective = new Row();\r\n        this._artificial = null;\r\n        this._idTick = 0;\r\n    }\r\n    /**\r\n     * Creates and add a constraint to the solver.\r\n     *\r\n     * @param {Expression|Variable} lhs Left hand side of the expression\r\n     * @param {Operator} operator Operator\r\n     * @param {Expression|Variable|Number} rhs Right hand side of the expression\r\n     * @param {Number} [strength=Strength.required] Strength\r\n     */\r\n    Solver.prototype.createConstraint = function (lhs, operator, rhs, strength) {\r\n        if (strength === void 0) { strength = strength_1.Strength.required; }\r\n        var cn = new constraint_1.Constraint(lhs, operator, rhs, strength);\r\n        this.addConstraint(cn);\r\n        return cn;\r\n    };\r\n    /**\r\n     * Add a constraint to the solver.\r\n     *\r\n     * @param {Constraint} constraint Constraint to add to the solver\r\n     */\r\n    Solver.prototype.addConstraint = function (constraint) {\r\n        var cnPair = this._cnMap.find(constraint);\r\n        if (cnPair !== undefined) {\r\n            throw new Error('duplicate constraint');\r\n        }\r\n        // Creating a row causes symbols to be reserved for the variables\r\n        // in the constraint. If this method exits with an exception,\r\n        // then its possible those variables will linger in the var map.\r\n        // Since its likely that those variables will be used in other\r\n        // constraints and since exceptional conditions are uncommon,\r\n        // i'm not too worried about aggressive cleanup of the var map.\r\n        var data = this._createRow(constraint);\r\n        var row = data.row;\r\n        var tag = data.tag;\r\n        var subject = this._chooseSubject(row, tag);\r\n        // If chooseSubject couldnt find a valid entering symbol, one\r\n        // last option is available if the entire row is composed of\r\n        // dummy variables. If the constant of the row is zero, then\r\n        // this represents redundant constraints and the new dummy\r\n        // marker can enter the basis. If the constant is non-zero,\r\n        // then it represents an unsatisfiable constraint.\r\n        if (subject.type() === SymbolType.Invalid && row.allDummies()) {\r\n            if (!nearZero(row.constant())) {\r\n                throw new Error('unsatisfiable constraint');\r\n            }\r\n            else {\r\n                subject = tag.marker;\r\n            }\r\n        }\r\n        // If an entering symbol still isn't found, then the row must\r\n        // be added using an artificial variable. If that fails, then\r\n        // the row represents an unsatisfiable constraint.\r\n        if (subject.type() === SymbolType.Invalid) {\r\n            if (!this._addWithArtificialVariable(row)) {\r\n                throw new Error('unsatisfiable constraint');\r\n            }\r\n        }\r\n        else {\r\n            row.solveFor(subject);\r\n            this._substitute(subject, row);\r\n            this._rowMap.insert(subject, row);\r\n        }\r\n        this._cnMap.insert(constraint, tag);\r\n        // Optimizing after each constraint is added performs less\r\n        // aggregate work due to a smaller average system size. It\r\n        // also ensures the solver remains in a consistent state.\r\n        this._optimize(this._objective);\r\n    };\r\n    /**\r\n     * Remove a constraint from the solver.\r\n     *\r\n     * @param {Constraint} constraint Constraint to remove from the solver\r\n     */\r\n    Solver.prototype.removeConstraint = function (constraint) {\r\n        var cnPair = this._cnMap.erase(constraint);\r\n        if (cnPair === undefined) {\r\n            throw new Error('unknown constraint');\r\n        }\r\n        // Remove the error effects from the objective function\r\n        // *before* pivoting, or substitutions into the objective\r\n        // will lead to incorrect solver results.\r\n        this._removeConstraintEffects(constraint, cnPair.second);\r\n        // If the marker is basic, simply drop the row. Otherwise,\r\n        // pivot the marker into the basis and then drop the row.\r\n        var marker = cnPair.second.marker;\r\n        var rowPair = this._rowMap.erase(marker);\r\n        if (rowPair === undefined) {\r\n            var leaving = this._getMarkerLeavingSymbol(marker);\r\n            if (leaving.type() === SymbolType.Invalid) {\r\n                throw new Error('failed to find leaving row');\r\n            }\r\n            rowPair = this._rowMap.erase(leaving);\r\n            rowPair.second.solveForEx(leaving, marker);\r\n            this._substitute(marker, rowPair.second);\r\n        }\r\n        // Optimizing after each constraint is removed ensures that the\r\n        // solver remains consistent. It makes the solver api easier to\r\n        // use at a small tradeoff for speed.\r\n        this._optimize(this._objective);\r\n    };\r\n    /**\r\n     * Test whether the solver contains the constraint.\r\n     *\r\n     * @param {Constraint} constraint Constraint to test for\r\n     * @return {Bool} true or false\r\n     */\r\n    Solver.prototype.hasConstraint = function (constraint) {\r\n        return this._cnMap.contains(constraint);\r\n    };\r\n    /**\r\n     * Add an edit variable to the solver.\r\n     *\r\n     * @param {Variable} variable Edit variable to add to the solver\r\n     * @param {Number} strength Strength, should be less than `Strength.required`\r\n     */\r\n    Solver.prototype.addEditVariable = function (variable, strength) {\r\n        var editPair = this._editMap.find(variable);\r\n        if (editPair !== undefined) {\r\n            throw new Error('duplicate edit variable');\r\n        }\r\n        strength = strength_1.Strength.clip(strength);\r\n        if (strength === strength_1.Strength.required) {\r\n            throw new Error('bad required strength');\r\n        }\r\n        var expr = new expression_1.Expression(variable);\r\n        var cn = new constraint_1.Constraint(expr, constraint_1.Operator.Eq, undefined, strength);\r\n        this.addConstraint(cn);\r\n        var tag = this._cnMap.find(cn).second;\r\n        var info = { tag: tag, constraint: cn, constant: 0.0 };\r\n        this._editMap.insert(variable, info);\r\n    };\r\n    /**\r\n     * Remove an edit variable from the solver.\r\n     *\r\n     * @param {Variable} variable Edit variable to remove from the solver\r\n     */\r\n    Solver.prototype.removeEditVariable = function (variable) {\r\n        var editPair = this._editMap.erase(variable);\r\n        if (editPair === undefined) {\r\n            throw new Error('unknown edit variable');\r\n        }\r\n        this.removeConstraint(editPair.second.constraint);\r\n    };\r\n    /**\r\n     * Test whether the solver contains the edit variable.\r\n     *\r\n     * @param {Variable} variable Edit variable to test for\r\n     * @return {Bool} true or false\r\n     */\r\n    Solver.prototype.hasEditVariable = function (variable) {\r\n        return this._editMap.contains(variable);\r\n    };\r\n    /**\r\n     * Suggest the value of an edit variable.\r\n     *\r\n     * @param {Variable} variable Edit variable to suggest a value for\r\n     * @param {Number} value Suggested value\r\n     */\r\n    Solver.prototype.suggestValue = function (variable, value) {\r\n        var editPair = this._editMap.find(variable);\r\n        if (editPair === undefined) {\r\n            throw new Error('unknown edit variable');\r\n        }\r\n        var rows = this._rowMap;\r\n        var info = editPair.second;\r\n        var delta = value - info.constant;\r\n        info.constant = value;\r\n        // Check first if the positive error variable is basic.\r\n        var marker = info.tag.marker;\r\n        var rowPair = rows.find(marker);\r\n        if (rowPair !== undefined) {\r\n            if (rowPair.second.add(-delta) < 0.0) {\r\n                this._infeasibleRows.push(marker);\r\n            }\r\n            this._dualOptimize();\r\n            return;\r\n        }\r\n        // Check next if the negative error variable is basic.\r\n        var other = info.tag.other;\r\n        rowPair = rows.find(other);\r\n        if (rowPair !== undefined) {\r\n            if (rowPair.second.add(delta) < 0.0) {\r\n                this._infeasibleRows.push(other);\r\n            }\r\n            this._dualOptimize();\r\n            return;\r\n        }\r\n        // Otherwise update each row where the error variables exist.\r\n        for (var i = 0, n = rows.size(); i < n; ++i) {\r\n            var rowPair_1 = rows.itemAt(i);\r\n            var row = rowPair_1.second;\r\n            var coeff = row.coefficientFor(marker);\r\n            if (coeff !== 0.0 &&\r\n                row.add(delta * coeff) < 0.0 &&\r\n                rowPair_1.first.type() !== SymbolType.External) {\r\n                this._infeasibleRows.push(rowPair_1.first);\r\n            }\r\n        }\r\n        this._dualOptimize();\r\n    };\r\n    /**\r\n     * Update the values of the variables.\r\n     */\r\n    Solver.prototype.updateVariables = function () {\r\n        var vars = this._varMap;\r\n        var rows = this._rowMap;\r\n        for (var i = 0, n = vars.size(); i < n; ++i) {\r\n            var pair = vars.itemAt(i);\r\n            var rowPair = rows.find(pair.second);\r\n            if (rowPair !== undefined) {\r\n                pair.first.setValue(rowPair.second.constant());\r\n            }\r\n            else {\r\n                pair.first.setValue(0.0);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Get the symbol for the given variable.\r\n     *\r\n     * If a symbol does not exist for the variable, one will be created.\r\n     * @private\r\n     */\r\n    Solver.prototype._getVarSymbol = function (variable) {\r\n        var _this = this;\r\n        var factory = function () { return _this._makeSymbol(SymbolType.External); };\r\n        return this._varMap.setDefault(variable, factory).second;\r\n    };\r\n    /**\r\n     * Create a new Row object for the given constraint.\r\n     *\r\n     * The terms in the constraint will be converted to cells in the row.\r\n     * Any term in the constraint with a coefficient of zero is ignored.\r\n     * This method uses the `_getVarSymbol` method to get the symbol for\r\n     * the variables added to the row. If the symbol for a given cell\r\n     * variable is basic, the cell variable will be substituted with the\r\n     * basic row.\r\n     *\r\n     * The necessary slack and error variables will be added to the row.\r\n     * If the constant for the row is negative, the sign for the row\r\n     * will be inverted so the constant becomes positive.\r\n     *\r\n     * Returns the created Row and the tag for tracking the constraint.\r\n     * @private\r\n     */\r\n    Solver.prototype._createRow = function (constraint) {\r\n        var expr = constraint.expression();\r\n        var row = new Row(expr.constant());\r\n        // Substitute the current basic variables into the row.\r\n        var terms = expr.terms();\r\n        for (var i = 0, n = terms.size(); i < n; ++i) {\r\n            var termPair = terms.itemAt(i);\r\n            if (!nearZero(termPair.second)) {\r\n                var symbol = this._getVarSymbol(termPair.first);\r\n                var basicPair = this._rowMap.find(symbol);\r\n                if (basicPair !== undefined) {\r\n                    row.insertRow(basicPair.second, termPair.second);\r\n                }\r\n                else {\r\n                    row.insertSymbol(symbol, termPair.second);\r\n                }\r\n            }\r\n        }\r\n        // Add the necessary slack, error, and dummy variables.\r\n        var objective = this._objective;\r\n        var strength = constraint.strength();\r\n        var tag = { marker: INVALID_SYMBOL, other: INVALID_SYMBOL };\r\n        switch (constraint.op()) {\r\n            case constraint_1.Operator.Le:\r\n            case constraint_1.Operator.Ge: {\r\n                var coeff = constraint.op() === constraint_1.Operator.Le ? 1.0 : -1.0;\r\n                var slack = this._makeSymbol(SymbolType.Slack);\r\n                tag.marker = slack;\r\n                row.insertSymbol(slack, coeff);\r\n                if (strength < strength_1.Strength.required) {\r\n                    var error = this._makeSymbol(SymbolType.Error);\r\n                    tag.other = error;\r\n                    row.insertSymbol(error, -coeff);\r\n                    objective.insertSymbol(error, strength);\r\n                }\r\n                break;\r\n            }\r\n            case constraint_1.Operator.Eq: {\r\n                if (strength < strength_1.Strength.required) {\r\n                    var errplus = this._makeSymbol(SymbolType.Error);\r\n                    var errminus = this._makeSymbol(SymbolType.Error);\r\n                    tag.marker = errplus;\r\n                    tag.other = errminus;\r\n                    row.insertSymbol(errplus, -1.0); // v = eplus - eminus\r\n                    row.insertSymbol(errminus, 1.0); // v - eplus + eminus = 0\r\n                    objective.insertSymbol(errplus, strength);\r\n                    objective.insertSymbol(errminus, strength);\r\n                }\r\n                else {\r\n                    var dummy = this._makeSymbol(SymbolType.Dummy);\r\n                    tag.marker = dummy;\r\n                    row.insertSymbol(dummy);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        // Ensure the row has a positive constant.\r\n        if (row.constant() < 0.0) {\r\n            row.reverseSign();\r\n        }\r\n        return { row: row, tag: tag };\r\n    };\r\n    /**\r\n     * Choose the subject for solving for the row.\r\n     *\r\n     * This method will choose the best subject for using as the solve\r\n     * target for the row. An invalid symbol will be returned if there\r\n     * is no valid target.\r\n     *\r\n     * The symbols are chosen according to the following precedence:\r\n     *\r\n     * 1) The first symbol representing an external variable.\r\n     * 2) A negative slack or error tag variable.\r\n     *\r\n     * If a subject cannot be found, an invalid symbol will be returned.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._chooseSubject = function (row, tag) {\r\n        var cells = row.cells();\r\n        for (var i = 0, n = cells.size(); i < n; ++i) {\r\n            var pair = cells.itemAt(i);\r\n            if (pair.first.type() === SymbolType.External) {\r\n                return pair.first;\r\n            }\r\n        }\r\n        var type = tag.marker.type();\r\n        if (type === SymbolType.Slack || type === SymbolType.Error) {\r\n            if (row.coefficientFor(tag.marker) < 0.0) {\r\n                return tag.marker;\r\n            }\r\n        }\r\n        type = tag.other.type();\r\n        if (type === SymbolType.Slack || type === SymbolType.Error) {\r\n            if (row.coefficientFor(tag.other) < 0.0) {\r\n                return tag.other;\r\n            }\r\n        }\r\n        return INVALID_SYMBOL;\r\n    };\r\n    /**\r\n     * Add the row to the tableau using an artificial variable.\r\n     *\r\n     * This will return false if the constraint cannot be satisfied.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._addWithArtificialVariable = function (row) {\r\n        // Create and add the artificial variable to the tableau.\r\n        var art = this._makeSymbol(SymbolType.Slack);\r\n        this._rowMap.insert(art, row.copy());\r\n        this._artificial = row.copy();\r\n        // Optimize the artificial objective. This is successful\r\n        // only if the artificial objective is optimized to zero.\r\n        this._optimize(this._artificial);\r\n        var success = nearZero(this._artificial.constant());\r\n        this._artificial = null;\r\n        // If the artificial variable is basic, pivot the row so that\r\n        // it becomes non-basic. If the row is constant, exit early.\r\n        var pair = this._rowMap.erase(art);\r\n        if (pair !== undefined) {\r\n            var basicRow = pair.second;\r\n            if (basicRow.isConstant()) {\r\n                return success;\r\n            }\r\n            var entering = this._anyPivotableSymbol(basicRow);\r\n            if (entering.type() === SymbolType.Invalid) {\r\n                return false; // unsatisfiable (will this ever happen?)\r\n            }\r\n            basicRow.solveForEx(art, entering);\r\n            this._substitute(entering, basicRow);\r\n            this._rowMap.insert(entering, basicRow);\r\n        }\r\n        // Remove the artificial variable from the tableau.\r\n        var rows = this._rowMap;\r\n        for (var i = 0, n = rows.size(); i < n; ++i) {\r\n            rows.itemAt(i).second.removeSymbol(art);\r\n        }\r\n        this._objective.removeSymbol(art);\r\n        return success;\r\n    };\r\n    /**\r\n     * Substitute the parametric symbol with the given row.\r\n     *\r\n     * This method will substitute all instances of the parametric symbol\r\n     * in the tableau and the objective function with the given row.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._substitute = function (symbol, row) {\r\n        var rows = this._rowMap;\r\n        for (var i = 0, n = rows.size(); i < n; ++i) {\r\n            var pair = rows.itemAt(i);\r\n            pair.second.substitute(symbol, row);\r\n            if (pair.second.constant() < 0.0 &&\r\n                pair.first.type() !== SymbolType.External) {\r\n                this._infeasibleRows.push(pair.first);\r\n            }\r\n        }\r\n        this._objective.substitute(symbol, row);\r\n        if (this._artificial) {\r\n            this._artificial.substitute(symbol, row);\r\n        }\r\n    };\r\n    /**\r\n     * Optimize the system for the given objective function.\r\n     *\r\n     * This method performs iterations of Phase 2 of the simplex method\r\n     * until the objective function reaches a minimum.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._optimize = function (objective) {\r\n        while (true) {\r\n            var entering = this._getEnteringSymbol(objective);\r\n            if (entering.type() === SymbolType.Invalid) {\r\n                return;\r\n            }\r\n            var leaving = this._getLeavingSymbol(entering);\r\n            if (leaving.type() === SymbolType.Invalid) {\r\n                throw new Error('the objective is unbounded');\r\n            }\r\n            // pivot the entering symbol into the basis\r\n            var row = this._rowMap.erase(leaving).second;\r\n            row.solveForEx(leaving, entering);\r\n            this._substitute(entering, row);\r\n            this._rowMap.insert(entering, row);\r\n        }\r\n    };\r\n    /**\r\n     * Optimize the system using the dual of the simplex method.\r\n     *\r\n     * The current state of the system should be such that the objective\r\n     * function is optimal, but not feasible. This method will perform\r\n     * an iteration of the dual simplex method to make the solution both\r\n     * optimal and feasible.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._dualOptimize = function () {\r\n        var rows = this._rowMap;\r\n        var infeasible = this._infeasibleRows;\r\n        while (infeasible.length !== 0) {\r\n            var leaving = infeasible.pop();\r\n            var pair = rows.find(leaving);\r\n            if (pair !== undefined && pair.second.constant() < 0.0) {\r\n                var entering = this._getDualEnteringSymbol(pair.second);\r\n                if (entering.type() === SymbolType.Invalid) {\r\n                    throw new Error('dual optimize failed');\r\n                }\r\n                // pivot the entering symbol into the basis\r\n                var row = pair.second;\r\n                rows.erase(leaving);\r\n                row.solveForEx(leaving, entering);\r\n                this._substitute(entering, row);\r\n                rows.insert(entering, row);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Compute the entering variable for a pivot operation.\r\n     *\r\n     * This method will return first symbol in the objective function which\r\n     * is non-dummy and has a coefficient less than zero. If no symbol meets\r\n     * the criteria, it means the objective function is at a minimum, and an\r\n     * invalid symbol is returned.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._getEnteringSymbol = function (objective) {\r\n        var cells = objective.cells();\r\n        for (var i = 0, n = cells.size(); i < n; ++i) {\r\n            var pair = cells.itemAt(i);\r\n            var symbol = pair.first;\r\n            if (pair.second < 0.0 && symbol.type() !== SymbolType.Dummy) {\r\n                return symbol;\r\n            }\r\n        }\r\n        return INVALID_SYMBOL;\r\n    };\r\n    /**\r\n     * Compute the entering symbol for the dual optimize operation.\r\n     *\r\n     * This method will return the symbol in the row which has a positive\r\n     * coefficient and yields the minimum ratio for its respective symbol\r\n     * in the objective function. The provided row *must* be infeasible.\r\n     * If no symbol is found which meats the criteria, an invalid symbol\r\n     * is returned.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._getDualEnteringSymbol = function (row) {\r\n        var ratio = Number.MAX_VALUE;\r\n        var entering = INVALID_SYMBOL;\r\n        var cells = row.cells();\r\n        for (var i = 0, n = cells.size(); i < n; ++i) {\r\n            var pair = cells.itemAt(i);\r\n            var symbol = pair.first;\r\n            var c = pair.second;\r\n            if (c > 0.0 && symbol.type() !== SymbolType.Dummy) {\r\n                var coeff = this._objective.coefficientFor(symbol);\r\n                var r = coeff / c;\r\n                if (r < ratio) {\r\n                    ratio = r;\r\n                    entering = symbol;\r\n                }\r\n            }\r\n        }\r\n        return entering;\r\n    };\r\n    /**\r\n     * Compute the symbol for pivot exit row.\r\n     *\r\n     * This method will return the symbol for the exit row in the row\r\n     * map. If no appropriate exit symbol is found, an invalid symbol\r\n     * will be returned. This indicates that the objective function is\r\n     * unbounded.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._getLeavingSymbol = function (entering) {\r\n        var ratio = Number.MAX_VALUE;\r\n        var found = INVALID_SYMBOL;\r\n        var rows = this._rowMap;\r\n        for (var i = 0, n = rows.size(); i < n; ++i) {\r\n            var pair = rows.itemAt(i);\r\n            var symbol = pair.first;\r\n            if (symbol.type() !== SymbolType.External) {\r\n                var row = pair.second;\r\n                var temp = row.coefficientFor(entering);\r\n                if (temp < 0.0) {\r\n                    var temp_ratio = -row.constant() / temp;\r\n                    if (temp_ratio < ratio) {\r\n                        ratio = temp_ratio;\r\n                        found = symbol;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return found;\r\n    };\r\n    /**\r\n     * Compute the leaving symbol for a marker variable.\r\n     *\r\n     * This method will return a symbol corresponding to a basic row\r\n     * which holds the given marker variable. The row will be chosen\r\n     * according to the following precedence:\r\n     *\r\n     * 1) The row with a restricted basic varible and a negative coefficient\r\n     *    for the marker with the smallest ratio of -constant / coefficient.\r\n     *\r\n     * 2) The row with a restricted basic variable and the smallest ratio\r\n     *    of constant / coefficient.\r\n     *\r\n     * 3) The last unrestricted row which contains the marker.\r\n     *\r\n     * If the marker does not exist in any row, an invalid symbol will be\r\n     * returned. This indicates an internal solver error since the marker\r\n     * *should* exist somewhere in the tableau.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._getMarkerLeavingSymbol = function (marker) {\r\n        var dmax = Number.MAX_VALUE;\r\n        var r1 = dmax;\r\n        var r2 = dmax;\r\n        var invalid = INVALID_SYMBOL;\r\n        var first = invalid;\r\n        var second = invalid;\r\n        var third = invalid;\r\n        var rows = this._rowMap;\r\n        for (var i = 0, n = rows.size(); i < n; ++i) {\r\n            var pair = rows.itemAt(i);\r\n            var row = pair.second;\r\n            var c = row.coefficientFor(marker);\r\n            if (c === 0.0) {\r\n                continue;\r\n            }\r\n            var symbol = pair.first;\r\n            if (symbol.type() === SymbolType.External) {\r\n                third = symbol;\r\n            }\r\n            else if (c < 0.0) {\r\n                var r = -row.constant() / c;\r\n                if (r < r1) {\r\n                    r1 = r;\r\n                    first = symbol;\r\n                }\r\n            }\r\n            else {\r\n                var r = row.constant() / c;\r\n                if (r < r2) {\r\n                    r2 = r;\r\n                    second = symbol;\r\n                }\r\n            }\r\n        }\r\n        if (first !== invalid) {\r\n            return first;\r\n        }\r\n        if (second !== invalid) {\r\n            return second;\r\n        }\r\n        return third;\r\n    };\r\n    /**\r\n     * Remove the effects of a constraint on the objective function.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._removeConstraintEffects = function (cn, tag) {\r\n        if (tag.marker.type() === SymbolType.Error) {\r\n            this._removeMarkerEffects(tag.marker, cn.strength());\r\n        }\r\n        if (tag.other.type() === SymbolType.Error) {\r\n            this._removeMarkerEffects(tag.other, cn.strength());\r\n        }\r\n    };\r\n    /**\r\n     * Remove the effects of an error marker on the objective function.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._removeMarkerEffects = function (marker, strength) {\r\n        var pair = this._rowMap.find(marker);\r\n        if (pair !== undefined) {\r\n            this._objective.insertRow(pair.second, -strength);\r\n        }\r\n        else {\r\n            this._objective.insertSymbol(marker, -strength);\r\n        }\r\n    };\r\n    /**\r\n     * Get the first Slack or Error symbol in the row.\r\n     *\r\n     * If no such symbol is present, an invalid symbol will be returned.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._anyPivotableSymbol = function (row) {\r\n        var cells = row.cells();\r\n        for (var i = 0, n = cells.size(); i < n; ++i) {\r\n            var pair = cells.itemAt(i);\r\n            var type = pair.first.type();\r\n            if (type === SymbolType.Slack || type === SymbolType.Error) {\r\n                return pair.first;\r\n            }\r\n        }\r\n        return INVALID_SYMBOL;\r\n    };\r\n    /**\r\n     * Returns a new Symbol of the given type.\r\n     *\r\n     * @private\r\n     */\r\n    Solver.prototype._makeSymbol = function (type) {\r\n        return new Symbol(type, this._idTick++);\r\n    };\r\n    return Solver;\r\n}());\r\nexports.Solver = Solver;\r\n/**\r\n * Test whether a value is approximately zero.\r\n * @private\r\n */\r\nfunction nearZero(value) {\r\n    var eps = 1.0e-8;\r\n    return value < 0.0 ? -value < eps : value < eps;\r\n}\r\n/**\r\n * An internal function for creating a constraint map.\r\n * @private\r\n */\r\nfunction createCnMap() {\r\n    return maptype_1.createMap();\r\n}\r\n/**\r\n * An internal function for creating a row map.\r\n * @private\r\n */\r\nfunction createRowMap() {\r\n    return maptype_1.createMap();\r\n}\r\n/**\r\n * An internal function for creating a variable map.\r\n * @private\r\n */\r\nfunction createVarMap() {\r\n    return maptype_1.createMap();\r\n}\r\n/**\r\n * An internal function for creating an edit map.\r\n * @private\r\n */\r\nfunction createEditMap() {\r\n    return maptype_1.createMap();\r\n}\r\n/**\r\n * An enum defining the available symbol types.\r\n * @private\r\n */\r\nvar SymbolType;\r\n(function (SymbolType) {\r\n    SymbolType[SymbolType[\"Invalid\"] = 0] = \"Invalid\";\r\n    SymbolType[SymbolType[\"External\"] = 1] = \"External\";\r\n    SymbolType[SymbolType[\"Slack\"] = 2] = \"Slack\";\r\n    SymbolType[SymbolType[\"Error\"] = 3] = \"Error\";\r\n    SymbolType[SymbolType[\"Dummy\"] = 4] = \"Dummy\";\r\n})(SymbolType || (SymbolType = {}));\r\n/**\r\n * An internal class representing a symbol in the solver.\r\n * @private\r\n */\r\nvar Symbol = /** @class */ (function () {\r\n    /**\r\n     * Construct a new Symbol\r\n     *\r\n     * @param [type] The type of the symbol.\r\n     * @param [id] The unique id number of the symbol.\r\n     */\r\n    function Symbol(type, id) {\r\n        this._id = id;\r\n        this._type = type;\r\n    }\r\n    /**\r\n     * Returns the unique id number of the symbol.\r\n     */\r\n    Symbol.prototype.id = function () {\r\n        return this._id;\r\n    };\r\n    /**\r\n     * Returns the type of the symbol.\r\n     */\r\n    Symbol.prototype.type = function () {\r\n        return this._type;\r\n    };\r\n    return Symbol;\r\n}());\r\n/**\r\n * A static invalid symbol\r\n * @private\r\n */\r\nvar INVALID_SYMBOL = new Symbol(SymbolType.Invalid, -1);\r\n/**\r\n * An internal row class used by the solver.\r\n * @private\r\n */\r\nvar Row = /** @class */ (function () {\r\n    /**\r\n     * Construct a new Row.\r\n     */\r\n    function Row(constant) {\r\n        if (constant === void 0) { constant = 0.0; }\r\n        this._cellMap = maptype_1.createMap();\r\n        this._constant = constant;\r\n    }\r\n    /**\r\n     * Returns the mapping of symbols to coefficients.\r\n     */\r\n    Row.prototype.cells = function () {\r\n        return this._cellMap;\r\n    };\r\n    /**\r\n     * Returns the constant for the row.\r\n     */\r\n    Row.prototype.constant = function () {\r\n        return this._constant;\r\n    };\r\n    /**\r\n     * Returns true if the row is a constant value.\r\n     */\r\n    Row.prototype.isConstant = function () {\r\n        return this._cellMap.empty();\r\n    };\r\n    /**\r\n     * Returns true if the Row has all dummy symbols.\r\n     */\r\n    Row.prototype.allDummies = function () {\r\n        var cells = this._cellMap;\r\n        for (var i = 0, n = cells.size(); i < n; ++i) {\r\n            var pair = cells.itemAt(i);\r\n            if (pair.first.type() !== SymbolType.Dummy) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Create a copy of the row.\r\n     */\r\n    Row.prototype.copy = function () {\r\n        var theCopy = new Row(this._constant);\r\n        theCopy._cellMap = this._cellMap.copy();\r\n        return theCopy;\r\n    };\r\n    /**\r\n     * Add a constant value to the row constant.\r\n     *\r\n     * Returns the new value of the constant.\r\n     */\r\n    Row.prototype.add = function (value) {\r\n        return (this._constant += value);\r\n    };\r\n    /**\r\n     * Insert the symbol into the row with the given coefficient.\r\n     *\r\n     * If the symbol already exists in the row, the coefficient\r\n     * will be added to the existing coefficient. If the resulting\r\n     * coefficient is zero, the symbol will be removed from the row.\r\n     */\r\n    Row.prototype.insertSymbol = function (symbol, coefficient) {\r\n        if (coefficient === void 0) { coefficient = 1.0; }\r\n        var pair = this._cellMap.setDefault(symbol, function () { return 0.0; });\r\n        if (nearZero((pair.second += coefficient))) {\r\n            this._cellMap.erase(symbol);\r\n        }\r\n    };\r\n    /**\r\n     * Insert a row into this row with a given coefficient.\r\n     *\r\n     * The constant and the cells of the other row will be\r\n     * multiplied by the coefficient and added to this row. Any\r\n     * cell with a resulting coefficient of zero will be removed\r\n     * from the row.\r\n     */\r\n    Row.prototype.insertRow = function (other, coefficient) {\r\n        if (coefficient === void 0) { coefficient = 1.0; }\r\n        this._constant += other._constant * coefficient;\r\n        var cells = other._cellMap;\r\n        for (var i = 0, n = cells.size(); i < n; ++i) {\r\n            var pair = cells.itemAt(i);\r\n            this.insertSymbol(pair.first, pair.second * coefficient);\r\n        }\r\n    };\r\n    /**\r\n     * Remove a symbol from the row.\r\n     */\r\n    Row.prototype.removeSymbol = function (symbol) {\r\n        this._cellMap.erase(symbol);\r\n    };\r\n    /**\r\n     * Reverse the sign of the constant and cells in the row.\r\n     */\r\n    Row.prototype.reverseSign = function () {\r\n        this._constant = -this._constant;\r\n        var cells = this._cellMap;\r\n        for (var i = 0, n = cells.size(); i < n; ++i) {\r\n            var pair = cells.itemAt(i);\r\n            pair.second = -pair.second;\r\n        }\r\n    };\r\n    /**\r\n     * Solve the row for the given symbol.\r\n     *\r\n     * This method assumes the row is of the form\r\n     * a * x + b * y + c = 0 and (assuming solve for x) will modify\r\n     * the row to represent the right hand side of\r\n     * x = -b/a * y - c / a. The target symbol will be removed from\r\n     * the row, and the constant and other cells will be multiplied\r\n     * by the negative inverse of the target coefficient.\r\n     *\r\n     * The given symbol *must* exist in the row.\r\n     */\r\n    Row.prototype.solveFor = function (symbol) {\r\n        var cells = this._cellMap;\r\n        var pair = cells.erase(symbol);\r\n        var coeff = -1.0 / pair.second;\r\n        this._constant *= coeff;\r\n        for (var i = 0, n = cells.size(); i < n; ++i) {\r\n            cells.itemAt(i).second *= coeff;\r\n        }\r\n    };\r\n    /**\r\n     * Solve the row for the given symbols.\r\n     *\r\n     * This method assumes the row is of the form\r\n     * x = b * y + c and will solve the row such that\r\n     * y = x / b - c / b. The rhs symbol will be removed from the\r\n     * row, the lhs added, and the result divided by the negative\r\n     * inverse of the rhs coefficient.\r\n     *\r\n     * The lhs symbol *must not* exist in the row, and the rhs\r\n     * symbol must* exist in the row.\r\n     */\r\n    Row.prototype.solveForEx = function (lhs, rhs) {\r\n        this.insertSymbol(lhs, -1.0);\r\n        this.solveFor(rhs);\r\n    };\r\n    /**\r\n     * Returns the coefficient for the given symbol.\r\n     */\r\n    Row.prototype.coefficientFor = function (symbol) {\r\n        var pair = this._cellMap.find(symbol);\r\n        return pair !== undefined ? pair.second : 0.0;\r\n    };\r\n    /**\r\n     * Substitute a symbol with the data from another row.\r\n     *\r\n     * Given a row of the form a * x + b and a substitution of the\r\n     * form x = 3 * y + c the row will be updated to reflect the\r\n     * expression 3 * a * y + a * c + b.\r\n     *\r\n     * If the symbol does not exist in the row, this is a no-op.\r\n     */\r\n    Row.prototype.substitute = function (symbol, row) {\r\n        var pair = this._cellMap.erase(symbol);\r\n        if (pair !== undefined) {\r\n            this.insertRow(row, pair.second);\r\n        }\r\n    };\r\n    return Row;\r\n}());\r\n//# sourceMappingURL=solver.js.map","import * as React from 'react';\r\n\r\n// const { useState, useEffect } = React;\r\n\r\ntype Props = {\r\n  child: React.ReactNode;\r\n  style: React.CSSProperties;\r\n};\r\n\r\nexport const SplitPane: React.FC<Props> = ({ style, child }) => {\r\n  //   const [collapsed, setCollapsed] = useState(true);\r\n\r\n  // useEffect(() => {\r\n  //   return () => {};\r\n  // }, []);\r\n\r\n  return (\r\n    <div className={'split-pane'} style={style}>\r\n      {child}\r\n    </div>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { SplitOrientation } from './Split';\r\n\r\nconst { useEffect } = React;\r\n\r\ntype Props = {\r\n  orientation: SplitOrientation;\r\n  onMouseDown: (event: React.MouseEvent<HTMLDivElement>) => void;\r\n};\r\n\r\nexport const Resizer: React.FC<Props> = ({ orientation, onMouseDown }) => {\r\n  useEffect(() => {\r\n    return () => {};\r\n  }, []);\r\n\r\n  let resizerClassName = 'resizer';\r\n  const isHorizontal = orientation === SplitOrientation.Horizontal;\r\n  if (isHorizontal) {\r\n    resizerClassName += ' horizontal';\r\n  } else {\r\n    resizerClassName += ' vertical';\r\n  }\r\n\r\n  return <div className={resizerClassName} onMouseDown={onMouseDown} />;\r\n};\r\n"],"sourceRoot":""}